<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="Gin使用"><a href="#Gin使用" class="headerlink" title="Gin使用"></a>Gin使用</h1><p>1.从前端页面获取表单数据</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:8080/form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/x-www-form-urlencoded<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    User:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    Pass:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    love:
    &lt;input type="checkbox" value="run"name="hobby">美女
    &lt;input type="checkbox" value="run"name="hobby">金钱
    &lt;input type="checkbox" value="run"name="hobby">游戏
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//1. 创建路由</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">//2.</span>
    r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/form"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//表单参数设置默认值</span>
        type1 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultPostForm</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"alert"</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">//接收username,password</span>
        username <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>
        password <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//接收hobby</span>
        hobbys <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostFormArray</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>
            fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"type is %s,username is %s,password is %s,hobby is %v"</span><span class="token punctuation">,</span> type1<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> hobbys<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">//3. 监听</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>2.静态资源加载</p>
<p>首先需要生成一个engine，这是gin的核心，默认带有Logger和Recovery两个中间件</p>
<pre><code>router := gin.Default()
</code></pre>
<p>StaticFile是加载单个文件，而StaticFS是加载一个完整的目录资源</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">Static</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">,</span> root <span class="token builtin">string</span><span class="token punctuation">)</span> IRoutes
</code></pre>
<p>Static加载，relativePath是改变的URL，root是本地资源路径，访问：</p>
<pre><code>localhost:8080/relativePath/资源名 (本地查看方式，假设开的8080端口)
</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="Go上手-工程实践"><a href="#Go上手-工程实践" class="headerlink" title="Go上手-工程实践"></a>Go上手-工程实践</h1><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>协程：用户态，轻量级线程，栈MB级别</p>
<p>线程：内核态，线程跑多个协程，栈KB级别</p>
<h3 id="CSP（communicating-Sequential-Processes）"><a href="#CSP（communicating-Sequential-Processes）" class="headerlink" title="CSP（communicating Sequential Processes）"></a>CSP（communicating Sequential Processes）</h3><p>提倡通过<strong>通信共享内存</strong>而不是通过共享内存而实现通信</p>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>make（chan元素类型，[缓冲大小]）</p>
<ul>
<li>无缓冲通道       make（chan int）          （也被称为同步通道）</li>
<li>有缓冲通过       make（chan int, 2）</li>
</ul>
<h3 id="并发安全Lock"><a href="#并发安全Lock" class="headerlink" title="并发安全Lock"></a>并发安全Lock</h3><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h4 id="GOPATH弊端"><a href="#GOPATH弊端" class="headerlink" title="GOPATH弊端"></a>GOPATH弊端</h4><p>A和B依赖于某一package的不同版本，问题是无法实现package的多版本控制</p>
<h4 id="Go-Vendor"><a href="#Go-Vendor" class="headerlink" title="Go Vendor"></a>Go Vendor</h4><ul>
<li>项目目录下增加vendor文件，所有依赖包副本形式放在$ProjectRoot/vendor</li>
<li>依赖寻址方式：vendor=&gt;GOPATH</li>
</ul>
<p>通过每个项目引入一份依赖的副本，解决了多个项目需要同一个package依赖的冲突问题</p>
<h4 id="Go-Vendor-弊端"><a href="#Go-Vendor-弊端" class="headerlink" title="Go Vendor-弊端"></a>Go Vendor-弊端</h4><ul>
<li>无法控制依赖的版本</li>
<li>更新项目又可能出现依赖冲突，导致编译错误</li>
</ul>
<h4 id="Go-Module"><a href="#Go-Module" class="headerlink" title="Go Module"></a>Go Module</h4><ul>
<li>通过go.mod文件管理依赖包版本</li>
<li>通过go get/go mod指令工具管理依赖包</li>
</ul>
<p>终极目标：定义版本规则和管理项目依赖关系</p>
<h3 id="依赖管理三要素"><a href="#依赖管理三要素" class="headerlink" title="依赖管理三要素"></a>依赖管理三要素</h3><ol>
<li>配置文件，描述依赖                go.mod</li>
<li>中心仓库管理依赖库                Proxy</li>
<li>本地工具                                  go get/mod</li>
</ol>
<h4 id="依赖配置-version"><a href="#依赖配置-version" class="headerlink" title="依赖配置-version"></a>依赖配置-version</h4><p>语义化版本</p>
<pre><code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;
V1.3.0
V2.3.0
</code></pre>
<p>基于commit伪版本</p>
<pre><code>vX.0.0-yyyymmddhhmmss-abcdefgh1234 (最后面是提交哈希码的前缀（哈希校验码）)
</code></pre>
<h4 id="依赖配置-indirect"><a href="#依赖配置-indirect" class="headerlink" title="依赖配置- indirect"></a>依赖配置- indirect</h4><ul>
<li>主版本2+ 模块会在模块路径增加/vN后缀</li>
<li>对于没有go.mod文件并且主版本2+的依赖，会+incompatible</li>
</ul>
<p><strong>选择最低的兼容版本</strong></p>
<h4 id="依赖分发-回源"><a href="#依赖分发-回源" class="headerlink" title="依赖分发-回源"></a>依赖分发-回源</h4><p>使用第三方平台的问题：</p>
<ul>
<li>无法保证构建稳定性     增加/修改/删除软件版本</li>
<li>无法保证依赖可用性     删除软件</li>
<li>增加第三方压力            代码托管平台负载问题</li>
</ul>
<p>依赖分发-变量GOPROXY</p>
<pre><code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;
服务站点URL列表，“direct”表示源站
</code></pre>
<h4 id="工具-go-get"><a href="#工具-go-get" class="headerlink" title="工具-go get"></a>工具-go get</h4><p>go get example.org/pkg</p>
<p>@update 默认    @none 删除依赖   @v1.1.2 tag版本，语义版本  @23dfdd5 特定的commit   @master 分支的最新commit</p>
<h4 id="工具-go-mod"><a href="#工具-go-mod" class="headerlink" title="工具-go mod"></a>工具-go mod</h4><p>go mod </p>
<ul>
<li>init  初始化，创建go.mod文件</li>
<li>download  下载模块到本地缓存</li>
<li>tidy  增加需要的依赖，删除不需要的依赖</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>回归测试—集成测试—单元测试       覆盖率逐渐变大，成本却逐渐降低</p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h4 id="单元测试-规则"><a href="#单元测试-规则" class="headerlink" title="单元测试-规则"></a>单元测试-规则</h4><ul>
<li>所有测试文件以_test.go结尾</li>
<li>func TestXxx（*testing.T）</li>
<li>初始化逻辑放到TestMain中</li>
</ul>
<h4 id="单元测试-覆盖率"><a href="#单元测试-覆盖率" class="headerlink" title="单元测试-覆盖率"></a>单元测试-覆盖率</h4><h4 id="单元测试-Tips"><a href="#单元测试-Tips" class="headerlink" title="单元测试-Tips"></a>单元测试-Tips</h4><ul>
<li>一般覆盖率：50%-60% 较高覆盖率80%+</li>
<li>测试分支相互独立，全面覆盖</li>
<li>测试单元粒度足够小，函数单一职责</li>
</ul>
<h3 id="单元测试-依赖"><a href="#单元测试-依赖" class="headerlink" title="单元测试-依赖"></a>单元测试-依赖</h3><h3 id="单元测试-文件处理"><a href="#单元测试-文件处理" class="headerlink" title="单元测试-文件处理"></a>单元测试-文件处理</h3><h3 id="单元测试-Mock"><a href="#单元测试-Mock" class="headerlink" title="单元测试-Mock"></a>单元测试-Mock</h3><p>monkey：<a href="https://github.com/bouk/monkey">https://github.com/bouk/monkey</a></p>
<p>快速Mock函数</p>
<ul>
<li>为一个函数打桩</li>
<li>为一个方法打桩</li>
</ul>
<h3 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h3><h4 id="基准测试-运行"><a href="#基准测试-运行" class="headerlink" title="基准测试-运行"></a>基准测试-运行</h4>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="Go环境配置及相关错误解决"><a href="#Go环境配置及相关错误解决" class="headerlink" title="Go环境配置及相关错误解决"></a>Go环境配置及相关错误解决</h1><p>1.当出现i/o timeout时，是因为墙的原因，用go env命令查看go环境变量</p>
<p>默认官网源是<code>GOPROXY=https://proxy.golang.org,direct</code>，在国内访问不到，到.bash_profile文件中添加export PATH=<a href="https://goproxy.cn,direct保存退出source/">https://goproxy.cn,direct保存退出source</a> ~/.bash_profile</p>
<p>2.当模块未下载或缺失时使用go mod tidy命令</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="Go语法入门"><a href="#Go语法入门" class="headerlink" title="Go语法入门"></a>Go语法入门</h1><h2 id="1-引入包"><a href="#1-引入包" class="headerlink" title="1.引入包"></a>1.引入包</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"math"</span>
<span class="token punctuation">)</span>
</code></pre>
<pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">import</span> <span class="token string">"math"</span>
</code></pre>
<h2 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2.函数参数"></a>2.函数参数</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连续参数含有相同的类型可以简化</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>多个返回值</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> y<span class="token punctuation">,</span>x<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>返回值可以命名，return语句是没有返回参数的，空的返回（空返回语句适合简短的函数，在长函数力会损害稳定性）</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">split</span><span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  x <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">9</span>
  y <span class="token operator">=</span> sum <span class="token operator">-</span> x
  <span class="token keyword">return</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java <span class="token builtin">bool</span>
</code></pre>
<p>如果变量已经初始化了，那么类型可以省略，变量可以根据初始值获得类型</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i<span class="token punctuation">,</span> j <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">//给定类型初始化              </span>
<span class="token keyword">var</span> c<span class="token punctuation">,</span>python<span class="token punctuation">,</span>java <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"no"</span>       <span class="token comment" spellcheck="true">//无类型初始化</span>
</code></pre>
<p>简短变量声明  := ，代替var声明，该声明只能在函数内使用，函数外每一个生命都是从var、func等关键字开始的</p>
<p>var的块声明</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
    a <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>
    c <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"no"</span>
<span class="token punctuation">)</span>
</code></pre>
<p>变量默认值：数字类型是0，布尔类型是false，字符串类型是””</p>
<p>类型转换</p>
<pre class=" language-go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">42</span>
f <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
u <span class="token operator">:=</span> <span class="token function">uint</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre>
<p>推断类型</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span>
j <span class="token operator">:=</span> i
</code></pre>
<p>常量，常量不能使用:=</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token string">"no"</span>
</code></pre>
<p>数字常量，是一个高精度值，一个无类型的常量根据上下文确定类型</p>
<p>4.WaitGroup</p>
<p>主协程有多个子协程运行的时候，主协程的退出需要使用time.sleep等待一段时间才能防止提前退出出问题，使用WaitGroup可以通过Add、Done、Wait更方便的解决上述问题。</p>
<h2 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4.结构体"></a>4.结构体</h2><p>struct{} 是一个无元素的结构体<strong>类型</strong>  适合用在只需要map的键的场景</p>
<p>struct{}{} 是一个复合字面量，构造了一个struct{} 类型的值，改值是空，两个struct{}{}地址相等</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<hr>
<h2 id="5月24日"><a href="#5月24日" class="headerlink" title="5月24日"></a>5月24日</h2><h1 id="HTTP网络协议"><a href="#HTTP网络协议" class="headerlink" title="HTTP网络协议"></a>HTTP网络协议</h1><h2 id="1-HTTP报文结构"><a href="#1-HTTP报文结构" class="headerlink" title="1. HTTP报文结构"></a>1. HTTP报文结构</h2><p><code>header + body</code>结构，具体：</p>
<pre><code>起始行 + 头部 + 空行 + 实体
</code></pre>
<h4 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h4><p>请求报文起始行：<strong>方法+路径+http版本</strong></p>
<pre><code>GET /home HTTP/1.1
</code></pre>
<p>响应报文起始行：也叫<code>状态行</code>，<strong>http版本+状态吗+原因</strong></p>
<pre><code>HTTP/1.1 200 OK
</code></pre>
<p>值得注意的是，在起始行中，每两个部分之间用<strong>空格</strong>隔开，最后一个部分后面应该接一个<strong>换行</strong>，严格遵循<code>ABNF</code>语法规范。</p>
<h4 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h4><ul>
<li>字段名不区分大小写</li>
<li>字段名不允许出现空格，不可以出现下划线_</li>
<li>字段名后面必须紧接着<code>:</code></li>
</ul>
<h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>用来区分<code>头部</code>和<code>实体</code></p>
<p>如果在头部中间故意加一个空行会怎么样？那么空行后的内容全部被视为实体。</p>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><p>就是具体的数据，也就是<code>body</code>部分。请求报文对应<code>请求体</code>，响应报文对应<code>响应体</code>。</p>
<h2 id="2-如何理解HTTP的请求方法？"><a href="#2-如何理解HTTP的请求方法？" class="headerlink" title="2. 如何理解HTTP的请求方法？"></a>2. 如何理解HTTP的请求方法？</h2><h4 id="有哪些请求方法？"><a href="#有哪些请求方法？" class="headerlink" title="有哪些请求方法？"></a>有哪些请求方法？</h4><p>http/1.1规定了以下请求方法：</p>
<ul>
<li>GET：通常用来获取资源</li>
<li>HEAD：获取资源的元信息</li>
<li>POST：提交数据，即上传数据</li>
<li>PUT：修改数据</li>
<li>DELETE：删除资源</li>
<li>CONNECT：建立连接隧道，用于代理服务器</li>
<li>OPTIONS：列出可对资源实行的请求方法，用来跨域请求</li>
<li>TRACE：追踪请求-响应的传输路径</li>
</ul>
<h4 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h4><ul>
<li>缓存：GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会</li>
<li>编码：GET只能进行URL编码，只能接收ASCII字符，而POST没有限制</li>
<li>参数：GET一般放在URL中，因此不安全，POST放在请求体中，更适合传输敏感信息</li>
<li>幂等性：GET是幂等的，而POST不是。（幂等表示执行相同的操作，结果也是相同的）</li>
<li>TCP：GET请求会把请求报文一次性发出去，而POST会分为两个TCP数据包，首先发header部分，如果服务器响应100，然后发body部分。（火狐浏览器除外，它的POST请求只发一个TCP包）</li>
</ul>
<h2 id="3-如何理解URI"><a href="#3-如何理解URI" class="headerlink" title="3. 如何理解URI"></a>3. 如何理解URI</h2><p>URI（Uniform Resource Identifier），也就是统一资源标识符，作用是区分互联网上不同的资源。</p>
<p>它并不是我们常说的<code>网址</code>，网址是URL，实际上URI包含了URL和URN两个部分。</p>
<h4 id="URI的结构"><a href="#URI的结构" class="headerlink" title="URI的结构"></a>URI的结构</h4><pre><code>scheme :// user:passwd@ host:port path ?query #fragment
</code></pre>
<ul>
<li>scheme：协议名，比如http，https，file等，后面必须和://连在一起</li>
<li>user:passwd@：表示登录主机时的用户信息，不过很不安全，不推荐使用，也不常用</li>
<li>host:port：表示主机名和端口</li>
<li>path：请求路径，标记资源所在位置</li>
<li>query：查询参数，为<code>key=val</code>这种形式，多个键值对之间用&amp;隔开</li>
<li>fragment：表示URI所定位的资源内的一个锚点，浏览器可以根据这个锚点跳转到对应的位置。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>IO流使用</title>
    <url>/posts/11766253.html</url>
    <content><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>1.1 配置文件的加载</p>
<span id="more"></span>
<pre class=" language-java"><code class="language-java">Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>配置文件名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>关键字<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>Java篇</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/posts/8fe47ff4.html</url>
    <content><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="1-获取数据库连接的方式"><a href="#1-获取数据库连接的方式" class="headerlink" title="1. 获取数据库连接的方式"></a>1. 获取数据库连接的方式</h2><span id="more"></span>
<h2 id="2-Statement操作数据库的弊端及sql注入"><a href="#2-Statement操作数据库的弊端及sql注入" class="headerlink" title="2. Statement操作数据库的弊端及sql注入"></a>2. Statement操作数据库的弊端及sql注入</h2><ul>
<li>sql注入：利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令，从而利用系统的SQL引擎完成恶意行为的做法。</li>
<li>对于java而言，防范SQL注入，只要用PreparedStatement取代Statement就行。</li>
</ul>
<h2 id="3-PreparedStatement"><a href="#3-PreparedStatement" class="headerlink" title="3. PreparedStatement"></a>3. PreparedStatement</h2><h2 id="4-数据库连接池"><a href="#4-数据库连接池" class="headerlink" title="4.数据库连接池"></a>4.数据库连接池</h2><p>4.1 使用数据库连接池技术的好处</p>
<ol>
<li>更方便的获取连接对象，效率高</li>
<li>资源可以更好的重复利用</li>
<li>便于进行必要的管理</li>
</ol>
<p>数据库连接池使用DataSource来表示，DataSource只是个接口，具体实现需要由服务器提供（Tomcat）。目前主要用Druid。</p>
<p>Druid连接数据库，基本信息声明在配置文件中</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提供properties，并加载指定配置文件的流</span>
Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"配置文件名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//通过DruidDataSourceFactory创建一个数据源</span>
DataSource dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//通过数据源获取连接</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ol>
<li>获取数据库的连接</li>
<li>提供一条带占位符的查询语句sql</li>
<li>创建QueryRunner的实例</li>
<li>通过QueryRunner的实例，调用其query（）</li>
<li>关闭资源</li>
</ol>
<p>数据表的查询操作：</p>
<p>BeanHandler：对应查询表中的一条记录，以对象的方式返回 ———BeanListHandler</p>
<p>MapHandler：对应查询表中的一条记录，以map对象的方式返回，map中key为表中的字段名，value是表中的一条数据的数据值 ———-MapListHandler</p>
<p>ScalarHandler：用于查询表中的特殊值，比如：count（*）、max（<strong>）、min（</strong>）</p>
<p>字段名和属性名不一致的情况解决：</p>
<ol>
<li>通过反射创建Order类的对象：Class类的newInstance（）</li>
<li>通过反射调用指定类的指定方法setXXX（），对相关的属性XXX进行赋值</li>
</ol>
<p>不一致还可以通过sql语句的别名解决</p>
<h2 id="5-DAO及相关实现类"><a href="#5-DAO及相关实现类" class="headerlink" title="5.DAO及相关实现类"></a>5.DAO及相关实现类</h2><p>DAO：Data Access Object访问数据信息的类和接口，包括类对数据的CRUD，而不包含任何业务相关的信息，有时也称作：BaseDAO</p>
<p>作用：为了实现功能的模块化，更有利于代码的维护和升级</p>
]]></content>
      <categories>
        <category>数据库篇</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/posts/99720b1c.html</url>
    <content><![CDATA[<h1 id="JavaWeb基础"><a href="#JavaWeb基础" class="headerlink" title="JavaWeb基础"></a>JavaWeb基础</h1><h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h2><p>Servlet是接口；JavaWeb的三大组件（Servlet、Filter、Listener）之一；Servlet是运行在服务器上的一个java小程序，它可以接收客户端发送过来的请求，并响应数据给客户端。</p>
<span id="more"></span>
<p>首先定义一个实现类去实现Servlet接口</p>
<p>服务器如何知道定义的实现类？web.xml配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- servlet标签给tomcat配置Servlet程序 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- servlet-name标签 Servlet程序起一个别名--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>AddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- servlet-class是Servlet程序的全名 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.zlh.AddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--servlet-mapping标签给servlet程序配置访问地址--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- servlet-name标签的作用是告诉服务器，我当前配置的地址给哪个Servlet程序使用--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>AddServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- url-pattern标签配置访问地址
        / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径
        /hello 表示地址为：http://ip:port/工程路径/hello
        --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
</code></pre>
<p>Servlet的生命周期：</p>
<ol>
<li>执行Servlet构造器方法</li>
<li>执行init初始化方法</li>
<li>执行service方法</li>
<li>执行destroy销毁方法</li>
</ol>
<p>一般在实际开发中，都是使用继承HttpServlet类的方式去实现Servlet程序</p>
<ol>
<li>编写一个类去继承HttpServlet类</li>
<li>根据业务需要重写doGet或doPost方法</li>
<li>到web.xml中的配置Servlet程序的访问地址</li>
</ol>
<pre><code>Interface Servlet              Servlet接口，只是负责定义Servlet程序的访问规范
Class GenericServlet           GenericServlet类实现了Servlet接口，做了很多空实现，并持有一个ServletConfig类的引用，并对ServletConfig的使用做了一些方法。
Class HttpServlet              HttpServlet抽取类实现了service（）方法，并实现了请求的分发处理，doGet和doPost负责抛出异常，说不支持GET/POST请求
自定义的Servlet程序              只需要根据自己的业务需要重写doGet和doPost方法
</code></pre>
<h3 id="1-2-ServletConfig类"><a href="#1-2-ServletConfig类" class="headerlink" title="1.2 ServletConfig类"></a>1.2 ServletConfig类</h3><p>作用：</p>
<ol>
<li>可以获取Servlet程序的别名servlet-name的值</li>
<li>获取初始化参数init-param</li>
<li>获取ServletContext对象</li>
</ol>
<p>Servlet程序和ServletConfig对象都是由Tomcat负责创建，我们负责使用</p>
<p>Servlet程序默认第一次访问的时候创建，ServletConfig是每个Servlet程序创建时，就创建一个ServletConfig对象。</p>
<h3 id="1-3-ServletContext类"><a href="#1-3-ServletContext类" class="headerlink" title="1.3 ServletContext类"></a>1.3 ServletContext类</h3><ol>
<li>ServletContext是一个接口，它表示Servlet上下文对象</li>
<li>一个web工程，只有一个ServletContext对象实例</li>
<li>ServletContext对象是一个域对象</li>
<li>ServletContext是在web工程部署启动的时候创建，在web工程停止的时候销毁。</li>
</ol>
<p>域对象：可以像Map一样存取数据的对象，域指的是存取数据的操作范围。</p>
<table>
<thead>
<tr>
<th></th>
<th>存数据</th>
<th>取数据</th>
<th>删除数据</th>
</tr>
</thead>
<tbody><tr>
<td>Map</td>
<td>put</td>
<td>get</td>
<td>remove</td>
</tr>
<tr>
<td>域对象</td>
<td>setAttribute</td>
<td>getAttribute</td>
<td>removeAttribute</td>
</tr>
</tbody></table>
<p>作用：</p>
<ol>
<li>获取web.xml中配置的上下文参数context-param</li>
<li>获取当前的工程路径，格式：/工程路径</li>
<li>获取工程部署后在服务器硬盘上的绝对路径</li>
<li>像Map一样存取数据</li>
</ol>
<p>getContextPath（）当前工程路径</p>
<p>/ 斜杠被服务器解析地址为：<a href="http://ip:post/工程名/">http://ip:post/工程名/</a>     映射到IDEA代码的web目录</p>
<p>getRealPath方法获取工程下指定目录的绝对路径</p>
<p>GET请求：</p>
<ol>
<li>form标签 </li>
<li>a标签</li>
<li>link标签引入css</li>
<li>Script标签引入js文件</li>
<li>img标签引入图片</li>
<li>iframe引入html页面</li>
<li>在浏览器地址栏中输入地址后敲回车</li>
</ol>
<p>POST请求：form标签</p>
<p>响应的HTTP协议格式</p>
<ol>
<li>响应行 ：1）响应的协议和版本号  2）响应状态码  3）响应状态描述符</li>
<li>响应头 ：1）key：value  2）空行</li>
<li>响应体</li>
</ol>
<h3 id="1-4-HttpServletRequest类"><a href="#1-4-HttpServletRequest类" class="headerlink" title="1.4 HttpServletRequest类"></a>1.4 HttpServletRequest类</h3><p>作用：每次只要有请求进入Tomcat服务器，Tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中。然后传递到service方法（doGet和doPost）中给我们使用，我们可以通过HttpServletRequest对象，获取到所有请求的信息。</p>
<pre><code>getRequestURI()                                        获取请求的资源路径
getRequestURL()                                        获取请求的统一资源定位符（绝对路径）
getRemoteHost()                                        获取客户端的ip地址
getHeader()                                                获取请求头
getParameter()                                        获取请求的参数
getParameterValues()                            获取请求的参数（多个值的时候使用）
getMethod()                                                获取请求的方式GET或POST
setAttribute(key, value)                    设置域数据
getAttribute(key)                                    获取域数据
getRequestDispatcher()                        获取请求转发对象，请求转发必须要以斜杠打头
</code></pre>
<p>post请求要设置下字符编码：setCharacterEncoding(“UTF-8”);</p>
<h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p>服务器收到请求后，从一个资源跳转到另一个资源的操作叫请求转发</p>
<p>特点：</p>
<ol>
<li>浏览器地址栏不变</li>
<li>他们是一次请求</li>
<li>他们共享Request域中的数据</li>
<li>可以转发到WEB-INF目录下</li>
<li>不能访问工程以外的资源</li>
</ol>
<p>base标签的作用：base标签设置页面相对路径工作时参照的地址。href属性就是参照的地址值。</p>
<p>当我们点击a标签进行跳转的时候，浏览器地址栏中的地址是；跳转回去的a标签路径是；所有相对路径在工作时候都会参照当前浏览器地址栏中的地址来进行跳转。</p>
<p>/ 斜杠被浏览器解析是<a href="http://ip:port/">http://ip:port/</a> </p>
<p>/ 斜杠被服务器解析，得到的地址是<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p>
<p>特殊情况：response.sendRedirect(“/“); 把斜杠发送给浏览器解析。得到<a href="http://ip:port/">http://ip:port/</a> </p>
<h3 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h3><p>HttpServletResponse和HttpServletRequest类一样，每次请求进来，Tomcat服务器都会创建一个Response对象传递给Servlet程序去使用。如果需要设置返回给客户端的信息，都可以通过HttpServletResponse对象来进行设置。</p>
<p>响应解决客户端中文乱码：</p>
<p>1.同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头（此方法一定要在获取流对象之前调用才有效）：resp.setContentType(“text/html; charset=UTF-8”);</p>
<p>2.通过响应头，设置浏览器也使用UTF-8：resp.setHeader(“Content-Type”, “text/html; charset=UTF-8”);</p>
<h3 id="请求重定向特点：resp-sendRedirect"><a href="#请求重定向特点：resp-sendRedirect" class="headerlink" title="请求重定向特点：resp.sendRedirect()"></a>请求重定向特点：resp.sendRedirect()</h3><ol>
<li>浏览器地址栏有变化</li>
<li>两次请求</li>
<li>不共享Request域中数据</li>
<li>（WEB—INF是受保护的，浏览器无法访问）不能访问WEB-INF中的资源</li>
<li>可以访问工程外的资源</li>
</ol>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>HTTP无状态：服务器无法判断这两次请求是同一个客户端发过来的，还是不同的客户端发过来的。</p>
<p>通过会话跟踪技术来解决无状态的问题</p>
<p>常用API：</p>
<ol>
<li>request.getSession()                   -&gt;获取当前的会话，没有则创建一个新的会话</li>
<li>request.getSession(true)             -&gt;效果和不带参数相同</li>
<li>request.getSession(false)           -&gt; 获取当前会话，没有则返回null，不会创建新的</li>
</ol>
<p>Servlet从3.0开始支持注解的方式注册</p>
<h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><p>在html页面上加载java内存中的从数据库中取出的数据，这个过程称为渲染（render），thymeleaf是用来帮助我们做视图渲染的一个技术</p>
]]></content>
      <categories>
        <category>前端篇</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/posts/df2849ec.html</url>
    <content><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><p>1.1 split(“+”) 报错 dangling metacharacter：split入参要求正则，传入\+和[+]都是合法的。</p>
<span id="more"></span>
<p>为什么加个[]可以起到类似转义的效果？因为入参要求正则，split(“+”)会默认传入一个合法的正则表达式，而+在正则表达式里是让前面的字符至少一次以上的意思，现在+前面没有任何字符，就不是一个合法的表达式，+还有普通加号的意思，</p>
<p>1.2 更改器方法和访问器方法</p>
<p>1.3 取模运算符左右两边类型要一致不然结果可能出错</p>
]]></content>
      <categories>
        <category>Java篇</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>终端命令错误记录</title>
    <url>/posts/8e912fe0.html</url>
    <content><![CDATA[<h1 id="Mac终端命令错误记录"><a href="#Mac终端命令错误记录" class="headerlink" title="Mac终端命令错误记录"></a>Mac终端命令错误记录</h1><p>1.Mac上在iterm2中使用ls时，出现Operation not permitted</p>
<p>解决方案：打开 系统偏好设置-安全性与隐私-隐私，然后在左侧选择‘文件和文件夹’，在右侧列表找到iterm，如果已经选中文件夹，取消勾选，然后再重新勾选，重启iterm即可。</p>
]]></content>
      <categories>
        <category>系统篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>终端命令</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL8.0新特性</title>
    <url>/posts/a1c49013.html</url>
    <content><![CDATA[<h1 id="MySQL8-0新特性"><a href="#MySQL8-0新特性" class="headerlink" title="MySQL8.0新特性"></a>MySQL8.0新特性</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-新增特性"><a href="#1-1-新增特性" class="headerlink" title="1.1 新增特性"></a>1.1 新增特性</h3><ol>
<li>更简便的NoSQL支持</li>
<li>更好的索引</li>
<li>更完善的JSON支持</li>
<li>安全和账户管理</li>
<li>InnoDB的变化</li>
<li>数据字典</li>
<li>原子数据定义语句</li>
<li>资源管理<span id="more"></span></li>
<li>字符集支持</li>
<li>优化器增强</li>
<li>公用表表达式</li>
<li>窗口函数</li>
<li>正则表达式支持</li>
<li>内部临时表</li>
<li>日志记录</li>
<li>备份锁</li>
<li>增强的MySQL复制</li>
</ol>
<h3 id="1-2-删除的旧特性"><a href="#1-2-删除的旧特性" class="headerlink" title="1.2 删除的旧特性"></a>1.2 删除的旧特性</h3><h2 id="2-窗口函数"><a href="#2-窗口函数" class="headerlink" title="2.窗口函数"></a>2.窗口函数</h2><h3 id="2-1-序号函数"><a href="#2-1-序号函数" class="headerlink" title="2.1 序号函数"></a>2.1 序号函数</h3><p>ROW NUMBER（）函数</p>
<pre class=" language-sql"><code class="language-sql">ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>RNAK（）函数</p>
<pre class=" language-sql"><code class="language-sql">RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>DENSE_RANK（）函数</p>
<pre class=" language-sql"><code class="language-sql">DENSE_RANK（）<span class="token keyword">OVER</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>语句写法方式二.</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> RANK（） <span class="token keyword">OVER</span> w <span class="token keyword">AS</span> r
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">WHERE</span> WINDOW w <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
</code></pre>
<h3 id="2-2-分布函数"><a href="#2-2-分布函数" class="headerlink" title="2.2 分布函数"></a>2.2 分布函数</h3><p>PERCENT_RANK（）</p>
<p>CUME_DIST（）</p>
<h3 id="2-3-前后函数"><a href="#2-3-前后函数" class="headerlink" title="2.3 前后函数"></a>2.3 前后函数</h3><p>LAG（expr，n）函数返回当前行的前n行的expr的值 </p>
<p>LEAD（expr，n）函数返回当前行的后n行的expr的值</p>
<h3 id="2-4-首尾函数"><a href="#2-4-首尾函数" class="headerlink" title="2.4 首尾函数"></a>2.4 首尾函数</h3><p>FIRST_VALUE（expr）函数返回第一个expr的值</p>
<h3 id="2-5-其他函数"><a href="#2-5-其他函数" class="headerlink" title="2.5 其他函数"></a>2.5 其他函数</h3><p>NTH_VALUE（expr，n）函数返回第n的expr信息</p>
<p>NTILE（n）函数返回按n分组的信息</p>
<p><strong>小结：窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数。</strong></p>
]]></content>
      <categories>
        <category>数据库篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>1.终端打开mysq命令</p>
<pre><code>mysql -u root -p
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/posts/6c92115f.html</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>Spring是轻量级的开源的JavaEE框架       Spring两个核心部分：IOC（控制反转）和AOP（面向切面）</p>
<p>IOC：把创建对象过程交给Spring进行管理            AOP：不修改源代码进行功能增强</p>
<h2 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2.IOC"></a>2.IOC</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ol>
<li>控制反转：把对戏那个创建和对象之间的调用过程，交给Spring进行管理</li>
<li>使用IOC目的：为了耦合度降低</li>
</ol>
<h3 id="1-2-底层原理"><a href="#1-2-底层原理" class="headerlink" title="1.2 底层原理"></a>1.2 底层原理</h3><p>xml解析、工厂模式、反射</p>
<h3 id="1-3-IOC过程"><a href="#1-3-IOC过程" class="headerlink" title="1.3 IOC过程"></a>1.3 IOC过程</h3><p>第一步：xml配置文件，配置创建的对象</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>第二步：由service类和dao类创建工厂类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> UserDao <span class="token function">getDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String classValue <span class="token operator">=</span> <span class="token keyword">class</span>属性值；<span class="token comment" spellcheck="true">//1.xml解析</span>
    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.通过反射创建对象</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="1-4-IOC接口"><a href="#1-4-IOC接口" class="headerlink" title="1.4 IOC接口"></a>1.4 IOC接口</h3><p>1.IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p>
<p>2.Spring提供IOC容器实现的两种方式：（两个接口）</p>
<ol>
<li>BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用   **加载配置文件的时候不会创建对象，在获取或者使用的时候才去创建对象。</li>
<li>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。**加载配置文件时候就创建对象。</li>
</ol>
<p>3.ApplicationContext接口有实现类</p>
<pre class=" language-java"><code class="language-java">ClassPathXmlApplicationContext：src下的路径
FileSystemXmlApplicationContext：对应的盘的全部路径
</code></pre>
<h3 id="1-5-IOC操作Bean"><a href="#1-5-IOC操作Bean" class="headerlink" title="1.5 IOC操作Bean"></a>1.5 IOC操作Bean</h3><h4 id="1-什么是Bean管理"><a href="#1-什么是Bean管理" class="headerlink" title="1.什么是Bean管理"></a>1.什么是Bean管理</h4><ol>
<li>Bean管理指的是两个操作：创建对象和注入属性</li>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ol>
<h4 id="2-Bean管理操作有两种方式"><a href="#2-Bean管理操作有两种方式" class="headerlink" title="2.Bean管理操作有两种方式"></a>2.Bean管理操作有两种方式</h4><h5 id="基于xml配置文件方式实现"><a href="#基于xml配置文件方式实现" class="headerlink" title="基于xml配置文件方式实现"></a>基于xml配置文件方式实现</h5><h6 id="1-基于xml方式创建对象"><a href="#1-基于xml方式创建对象" class="headerlink" title="1.基于xml方式创建对象"></a>1.基于xml方式创建对象</h6><ol>
<li>在Spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建</li>
<li>在bean标签中有很多属性：id属性：唯一标识   class属性：类全路径</li>
<li>默认创建对象时，也是执行无参数构造方法完成对象创建</li>
</ol>
<h6 id="2-基于xml方式注入属性"><a href="#2-基于xml方式注入属性" class="headerlink" title="2.基于xml方式注入属性"></a>2.基于xml方式注入属性</h6><p>1）DI：依赖注入，就是注入属性      —–》使用set方法或者构造器方法注入</p>
<p>set方法注入属性（无参数构造器）：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  String bname<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    bname <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>有参数构造器实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Orders</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>String oname<span class="token punctuation">,</span> String address<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ccc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>p名称空间注入</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
  <span class="token attr-name">&lt;bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.Book<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>bname</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaaa<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>bauthor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bbbb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<p>xml注入其他类型属性</p>
<p>1.字面值</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bauthor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
</code></pre>
<p>2.属性值包含特殊符号两种方法：    （1）把符号进行转义  （2）把特殊符号内容写到CDATA</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&lt;&lt;南京>>]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
</code></pre>
<p>外部bean</p>
<p>1）创建两个类service类和dao类</p>
<p>2）在service调用dao里面的方法</p>
<p>3）在Spring配置文件中进行配置</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建UserDao类型属性，生成set方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDap<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1 service和dao对象创建--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!--注入userDao对象
            name属性: 类里面属性名称
            ref属性：创建userDao对象bean标签id值
    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>内部bean和级联赋值</p>
<p>xml注入集合属性：</p>
<p>1）注入数组类型属性</p>
<p>2）注入List集合类型属性</p>
<p>3）注入Map集合类型属性</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cname <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">stu</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>
  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>
  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> list2<span class="token punctuation">;</span>
  <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">;</span>
  <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSets</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sets <span class="token operator">=</span> sets<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.Stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>杭三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  
</code></pre>
<p>把集合注入部分提取出来</p>
<p>1）在Spring配置文件中引入名称空间util</p>
<pre><code>xml
</code></pre>
<p>IOC操作Bean管理（FactoryBean）</p>
<p>1）Spring有两种类型bean，一种普通bean，另外一种工厂bean</p>
<p>2）普通bean：在配置文件中定义bean类型就是返回类型</p>
<p>3）工厂bean：在配置文件定义bean类型可以和返回类型不一样</p>
<p>第一步 创建类，让这个类作为工厂bean，实现接口FactoryBean</p>
<p>第二步 实现接口里面的方法，在实现的方法中定义返回的bean类型</p>
<h6 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h6><p>1.在Spring里面，设置创建bean实例是单实例还是多实例</p>
<p>2.在Spring里面，默认是单实例</p>
<p>3.如何设置单实例还是多实例</p>
<p>1）在Spring配置文件bean标签里面有属性用于设置单实例还是多实例</p>
<p>2）scope属性值：默认singleton单例，prototype表示多实例</p>
<p>3）singleton和prototype区别：</p>
<p>设置scope值是单实例的时候，加载spring配置文件时候就会创建单实例对象；设置是多实例的时候，不是在加载spring配置文件时候创建对象，在调用getBean方法时候创建多实例对象。</p>
<h6 id="IOC操作Bean管理（bean生命周期）"><a href="#IOC操作Bean管理（bean生命周期）" class="headerlink" title="IOC操作Bean管理（bean生命周期）"></a>IOC操作Bean管理（bean生命周期）</h6><p>1）通过构造器创建bean实例（无参数构造）</p>
<p>2）为bean的属性设置值和对其他bean引用（调用set方法）</p>
<p>**把bean实例传递bean后置处理器的方法     postProcessBeforeInitialization</p>
<p>3）调用bean的初始化的方法（需要进行配置）   init-method属性 </p>
<p>**把bean实例传递bean后置处理器的方法     postProcessAfterInitialization</p>
<p>4）bean可以使用了（对象获取到）</p>
<p>5）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法） destroyMethod属性</p>
<h6 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h6><p>根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</p>
<p>bean标签属性autowire，配置自动装配，常用两个值：byName根据名称注入，byType根据类型注入</p>
<h6 id="IOC操作Bean管理（引入外部属性文件）"><a href="#IOC操作Bean管理（引入外部属性文件）" class="headerlink" title="IOC操作Bean管理（引入外部属性文件）"></a>IOC操作Bean管理（引入外部属性文件）</h6><p>1.直接配置数据库信息</p>
<ol>
<li>配置druid连接池</li>
<li>引入druid连接池的依赖jar包</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/userDb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<p>2.引入外部属性文件配置数据库连接池</p>
<ol>
<li>创建外部属性文件，properties格式文件，写数据库信息</li>
<li>把外部properties配置文件引入到Spring配置文件中  ***引入名称空间    ***在Spring配置文件使用标签引入外部属性文件</li>
</ol>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">prop.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span>
<span class="token attr-name">prop.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/userDb</span>
<span class="token attr-name">prop.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">prop.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
</code></pre>
<pre><code>
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入外部属性文件--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!--配置连接池--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.driverClass&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="基于注解方式实现"><a href="#基于注解方式实现" class="headerlink" title="基于注解方式实现"></a>基于注解方式实现</h5><p>格式：@注解名称（属性名称=属性值，属性名称=属性值…)</p>
<p>(1) @Component</p>
<p>(2) @Service</p>
<p>(3) @Controller</p>
<p>(4) @Repository</p>
<p>上面四个注解功能是一样的，都可以用来创建bean实例</p>
<h6 id="基于注解方式实现对象创建："><a href="#基于注解方式实现对象创建：" class="headerlink" title="基于注解方式实现对象创建："></a>基于注解方式实现对象创建：</h6><p>第一步：引入依赖（AOP依赖）</p>
<p>第二步：开启组件扫描</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入名称空间--></span>
<span class="token comment" spellcheck="true">&lt;!--开启组件扫描
1.如果扫描多个包，多个包使用逗号隔开
2.扫描那个包的上层目录
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
</code></pre>
<p>第三步：创建类，加上注解（注解里面value属性值可以省略不写，默认值是类名称，首字母小写）</p>
<p>开启组件扫描细节配置：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--
use-default-filters="false" 表示现在不使用默认filter，自己配置filter
context:include-filter，设置扫描哪些内容
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
                          <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--
下面设置扫描包所有内容
context:include-filter，设置哪些内容不进行扫描
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zlh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>
                          <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>
</code></pre>
<h6 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h6><p>(1) @Autowired：根据属性类型进行自动装配</p>
<p>第一步：把service和dao对象创建，在service和dao类添加创建对象注解</p>
<p>第二步：把service注入dao对象，在service类添加dao类型属性，在属性上面使用注解（不需要添加set方法）</p>
<p>(2) @Qualifier：根据属性名称进行注入</p>
<p>(3) @Resource：属性类型和名称都可</p>
<p>(4) @Value：普通类型注入</p>
<h6 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h6><p>(1) 创建配置类，替代xml配置文件</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//作为配置类，替代配置文件</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"com.zlh"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>(2) 编写测试类</p>
<pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>配置类<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="3-AOP"><a href="#3-AOP" class="headerlink" title="3.AOP"></a>3.AOP</h2><p>不通过修改源代码，就能添加新功能</p>
<p>1.AOP底层使用动态代理</p>
<p>(1) 两种情况动态代理</p>
<p>第一种：有接口的情况，使用JDK动态代理     </p>
<p>创建接口实现类代理对象，增强类的方法</p>
<p>1）调用newProxyInstance方法，方法有三个参数：类加载器、增强方法所在的类（这个类实现的接口，支持多个接口）、实现这个接口InvocationHandler，创建代理对象，写增强的方法</p>
<p>创建接口，定义方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>创建实现类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>使用Proxy类创建接口代理对象</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Class<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    UserDaoImpl userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UserDao dao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>JDKProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//把创建的是谁的代理对象，把谁传递过来</span>
  <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">UserDaoProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//方法之前</span>
    
    <span class="token comment" spellcheck="true">//被增强的方法执行</span>
    Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//方法之后</span>
    <span class="token keyword">return</span> null<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>第二种：没有接口的情况，使用CGLIB动态代理</p>
<p>(2) AOP术语</p>
<ol>
<li>连接点：类里面哪些方法可以被增强，这些方法称为连接点</li>
<li>切入点：实际被真正增强的方法，称为切入点</li>
<li>通知：实际增强的逻辑部分称为通知    通知类型：前置通知，后置通知，环绕通知，异常通知，最终通知</li>
<li>切面：是动作，把通知应用到切入点过程</li>
</ol>
<p>(3) AOP操作（准备）</p>
<p>1.Spring框架一般都是基于AspectJ实现AOP操作</p>
<p>AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p>
<p>2.基于AspectJ实现AOP操作</p>
<p>基于xml配置文件实现</p>
<p>基于注解方式实现</p>
<p>3.在项目工程里面引入AOP相关依赖</p>
<pre><code>com.springsource.net.sf.cglib
com.springsource.org.aopalliance
com.springsource.org.aspectj.weaver
commons-logging
druid
spring-aop
spring-aspects
spring-beans
spring-context
spring-core
spring-expression
</code></pre>
<p>4.切入点表达式</p>
<p>作用：知道对哪个类里面的哪个方法进行增强</p>
<p>语法结构：</p>
<pre><code>execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))
</code></pre>
<p>例1:对com.zlh.dao.BookDao类里面的add进行增强   </p>
<pre><code>execution(* com.zlh.dao.BookDao.add(..))
</code></pre>
<p>例2:对com.zlh.dao.BookDao类里面的所有的方法进行增强    </p>
<pre><code>execution(*com.zlh.dao.BookDao.*(..))
</code></pre>
<p>例3:对com.zlh.dao包里面所有类，类里面所有方法进行增强</p>
<pre><code>execution(*com.zlh.dao.*.*(..))
</code></pre>
]]></content>
      <categories>
        <category>框架篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Spring</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<p>5月7日打卡，今日学习《Golang零值、空值与空结构》：本文介绍了零值：声明变量未显式初始化时，自动设置默认初始值的策略；对于值类型，布尔类型为false，数值类型为0，字符串为””，数组和结构会递归初始化其元素或字段；对于引用类型均为nil。介绍了nil：nil是Golang中预先声明的标识符，其主要用来表示引用类型的零值，表示它们未初始化的值，nil是Golang中唯一没有默认类型的非类型化的值，它不是一个未定义的状态，返回错误时永远使用error接口，并且永远不要初始化可能从函数返回的空错误变量。介绍了空结构：没有任何字段的结构类型，空结构不占用内存空间。</p>
<p>5月8日打卡，今日学习《新版本Golang的包管理入门教程》：本文介绍了新版本Golang的包管理，新的包管理模式能够自动下载依赖包，项目不必放在GOPATH/src内，通过git mod init *对新建项目生成一个go.mod文件，该文件列出包依赖，所有的第三方包会准确的指定版本号，而对于已经转移的包，可以通过replace声明替换，不需要改动代码。</p>
<p>5月9日打卡，今日学习《Golang 单元测试之路漫漫》：本文介绍了单元测试，通过go test命令，这个命令自动读取源码目录下的名为*_test.go的文件，生成并运行测试用的可执行文件。介绍了go test的相关参数bench regexp、cover、run regexp、v等</p>
<p>5月10日打卡，今日学习《Golang 并发编程实战——协程、管道、select用法》：通过本文学习了Go管道的用法、Chan的概念，本文通过案例讲解两个线程输出数据，通过两个管道实现、合并管道、协程间通信三种代码介绍用法。本文还讲解了案例设定超时等待时间，涉及知识点select解析，select解析的case必须是一个通信操作，要么发送要么接收。还讲解了一个实战模拟Google搜索服务来结合使用知识点。</p>
<p>5月11日打卡，今日学习《gRPC负载均衡-Golang》：根据负载均衡实现所在的位置不同，通常分为集中式LB、进程内LB、独立LB进程，gRPC默认使用protocol buffers。介绍了四种protoc：简单RPC、服务器端流式RPC、客户端流式RPC、双向流式RPC。有六种负载均衡算法。并通过gRPC的例子来进一步讲解知识点的运用，最后展示了最终效果。</p>
<p>5月12日打卡，今日学习《为Go配置JSON》：本文主要探讨如何在Go中使用JSON，JSON使用序列表格式化键值对。在Go中使用ioutil包中的ReadFile来读取JSON文件。在Go中使用Unmarshal函数帮助将数据解析为结构体。通过Marshal函数将结构编码为JSON数据。使用JSON标签帮助通过省略空字段来控制属性的键：omitempty。</p>
<p>5月13日打卡，今日学习《HTTP灵魂之问，巩固你的 HTTP 知识体系》：本文精细讲解了HTTP报文结构，并对HTTP的请求方法一一列举并从几个角度分析具体的差别。然后阐述了URL，由于URL只能使用ASCII码，故引入了编码机制，将所有非ASCII码字符和界定符转为十六进制字节值，然后在前面加%。接下来讲解了HTTP状态码和HTTP的特点以及缺点。对Accept系列字段进行详细介绍。同时回答了定长和不定长的数据如何传输，并采取范围请求的方案处理大文件的传输，http中有两种提交表单的方式，提现在两种不同的Content-Type值。</p>
<p>5月14日打卡，今日学习《Go微服务架构系列–gin框架》：通过本文学习了路由改造就不用维护单独的路由文件，推荐把路由放到控制层中维护，再介绍了搭建脚手架去消除改造带来的弊端。最后介绍了gin如何实现路由分组，只需在server.go中加一个方法即可。最后通过彩蛋部分学习了go的单例模式实现以及单例模式的加锁机制。</p>
<p>5月15日打卡，今日学习《由浅到深，入门Go语言Map实现原理》：本文首先介绍了Map的实现思路，Map一般会包含数组和链表两个主要结构，使用了两个数组分别存储键和值，有两个核心的结构体hmap和bmap，bmap有两个数组分别存放key和value。同时给出了桶溢出问题以及相关源码。</p>
<p>5月16日打卡，今日学习《Golang实践之博客(四) MySQL安装及GORM的增删查改｜Go主题月》：本文介绍了MySQL安装和GORM的简单实例。详细描述了GORM的引入和使用，首先下载GORM和mysql驱动，新增DbService连接到MySQL，新增实体UserEntity以及UserService，使用main调用DbService.ConnectDb，最后启动项目观察实际结果。</p>
<p>5月17日打卡，今日学习《Golang下的ORM框架gorm的介绍和使用》：本文介绍了详细的CRUD接口，对GORM接口使用有了大致的了解。并对钩子函数Hook和自动迁移有了初步了解。并对GORM里的模型和表概念区分，以及学习如何使用软删除和硬删除。</p>
<p>5月18日打卡，今日学习《Go语言之网络编程》：本文首先讲解了网络分层，然后简单介绍了socket编程，接着描述Go语言如何实现TCP通信，如TCP服务端程序的处理流程和TCP客户端进行TCP通信的流程，并通过示例解释了TCP黏包，并解释了黏包发生的原因同时指出可发生在发送端也可发生在接收端。最后描述了Go语言实现UDP通信，通过net包实现UDP服务端和客户端代码描述。</p>
<p>5月19日打卡，今日学习《通俗易懂的Redis数据结构基础教程》：本文指出Redis有五个基本数据结构string、list、hash、set、zset，并介绍了它们的具体用法。Redis是单线程的，hash扩容的时候采用渐进式rehash的方案，避免因扩容导致的线程卡顿现象，同时还支持缩容。zset底层实现使用了两个数据结构，第一个是hash第二个是跳跃列表。</p>
<p>5月20日打卡，今日学习《如何保证缓存和数据库的一致性？》：本文首先指出要结合业务的具体情况，根据不同业务对数据要求的实时性不同将数据分为三级。当选中合适的数据存入Redis，每当要读取数据的时候先去Redis中看看有没有，如果有直接返回，没有则去数据库中读取，并且将从数据库中读取到的数据缓存到Redis中。当需要更新的时候，有四种更新方案。通过介绍三个经典的缓存模式解释更新策略潜在的问题以及解决方案。</p>
<p>5月21日打卡，今日学习《一份给算法新人们的「动态规划」讲解》：本文首先介绍了无后效性，并通过案例讲解从暴力递归到记忆化搜索到动态规划的演变过程，最后指出动态规划的本质仍然是枚举，枚举所有的方案，并从中找出最优解，并消除无后效性。</p>
<p>5月22日打卡，今日学习《恋上数据结构与算法》：本文阐述了线性表：数组、链表、栈、队列、哈希表，分析了它们的使用场景以及优缺点；然后讲解了树形结构，对二叉树以及衍生出来的各种二叉树性质和概念进行介绍，对二叉树的遍历方式做了比较详细的介绍并通过具体算法题是如何实现做了比较完整的介绍；然后介绍了冒泡、选择、堆排序进行了介绍。最后列举了常见的算法题目举例说明算法的实际用法。</p>
<p>5月23日打卡，今日学习《我在工作中是如何使用 git 的》：本文细致讲解了git各个命令的具体用法，并结合工作中的实际场景分析如何使用为何这么使用，涉及merge、rebase、cherry-pick、revert、stash等命令的使用，包括使用alias简化命令输入提升开发效率。</p>
<p>5月24日打卡，今日学习《「算法与数据结构」DFS和BFS算法之美》：本文主要介绍了搜索相关的思想DFS和BFS，介绍了两种搜索的主要内容并通过几个例题讲解，对解题思路和如何运用详细介绍。</p>
<p>5月25日打卡，今日学习《后端程序员必备：mysql数据库相关流程图/原理图》：本文首先通过mysql主从复制原理图介绍了主从复制原理，简而言之就是三步操作，涉及binlog线程、io线程、sql执行线程，然后通过mysql逻辑架构图分析三层功能，随后给出InnoDB逻辑存储结构图，存储结构包含表空间、段、区、页等结构，并介绍了Innodb页结构图及组成部分，然后介绍了Innodb索引结构图设计B+树聚集索引和非聚集索引结构，最后介绍了与锁相关的内容，加锁机制、锁粒度、兼容性等。</p>
<p>5月26日打卡，今日学习《「算法与数据结构」时间与空间复杂度》：本文首先引入代码执行次数T(n)概念，在算法中用其简化后的估算值来表达代码执行的速度，列出常见的时间复杂度量级。空间复杂度是代码运行过程中占用存储空间大小表达方式，存储空间由变量决定。</p>
<p>5月27日打卡，今日学习《前后端分离项目，该如何定义接口规范》：本文从为何要分离开始介绍，图文介绍了MVC开发模式，但也存在一些问题，随后介绍了Ajax的SPA模式，但带来了几个重要挑战，如前后端接口的约定和前端开发的复杂度控制。随后指出职责分离、开发流程、具体实施步骤做分离。最后介绍了规范原则、基本格式的接口规范。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><p>1.interface类型定义了一组方法，如果某个对象实现了某个接口的所有方法，则此对象就实现了此接口。</p>
<p>2.当定义了一个interface变量，那么这个变量里面可以存实现这个interface的任意类型的对象。所以也就能定义一个包含interface类型元素的slice，这个slice可以被赋予实现了接口的任意结构的对象。</p>
<p>3.interface就是一组抽象方法的集合，它必须由其他非interface类型实现，而不能自我实现。</p>
<p>4.空interface不包含任何的method，所有的类型都实现了空interface，存储任意类型的数值的时候有用。</p>
<p>5.interface作为函数参数</p>
<p>6.interface变量存储的类型判断</p>
<p>Comma-ok断言：value, ok = element.(T)  value是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      list <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>List<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
      list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// an int</span>
      list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token comment" spellcheck="true">// a string</span>
      list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Dennis"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> element<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is an int and its value is %d\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> element<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is a string and its value is %s\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> element<span class="token punctuation">.</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is a Person and its value is %s\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is of a different type\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      list <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>List<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
      list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// an int</span>
      list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token comment" spellcheck="true">// a string</span>
      list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Dennis"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> index<span class="token punctuation">,</span> element <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">switch</span> value <span class="token operator">:=</span> element<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
                  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is an int and its value is %d\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
              <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
                  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is a string and its value is %s\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
              <span class="token keyword">case</span> Person<span class="token punctuation">:</span>
                  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is a Person and its value is %s\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
              <span class="token keyword">default</span><span class="token punctuation">:</span>
                  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"list[%d] is of a different type"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>7.嵌入interface</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h2><ul>
<li>代码文件必须是_test.go结尾</li>
<li>测试函数必须是func TestXxx（*testing.T）</li>
<li>初始化逻辑放到TestMain中</li>
</ul>
<h2 id="2-如何编写一个benchmark的基准测试"><a href="#2-如何编写一个benchmark的基准测试" class="headerlink" title="2.如何编写一个benchmark的基准测试"></a>2.如何编写一个benchmark的基准测试</h2><ul>
<li>基准测试代码文件必须是_test.go</li>
<li>基准测试的函数以Benchmark开头</li>
<li>参数必须为*testing.B</li>
<li>基准测试函数不能有返回值</li>
<li>b.ResetTimer是重置计时器，这样可以避免for循环之前的初始化代码的干扰，也就是之前的其他操作不应该作为基准测试的范围</li>
<li>b.N是基准测试框架提供的，Go会根据系统情况生成，不用用户设定，表示循环的次数，因为需要反复调用测试的代码，才可以评估性能</li>
<li>运行benchmark基准测试也要用到go test命令，不过我们后面需要加上-bench=参数，接受一个表达式作为参数，匹配基准测试的函数，”.”一个点表示运行所有的基准测试。例如：go test -bench=. -benchmem</li>
</ul>
<h2 id="3-benchmark结合pprof分析"><a href="#3-benchmark结合pprof分析" class="headerlink" title="3.benchmark结合pprof分析"></a>3.benchmark结合pprof分析</h2><p>两条命令：</p>
<ul>
<li>go test -bench=. -benchmem -cpuprofile=cpu.out</li>
<li>go test -bench=. -benchmem -memprofile=cpu.out</li>
</ul>
<p>上面两条命令生成的CPU、内存文件可以通过go tool pprof filename进行查看，然后在pprof中通过list Benchmark函数名查看CPU、内存的情况</p>
<h2 id="4-benchmark并行用法"><a href="#4-benchmark并行用法" class="headerlink" title="4.benchmark并行用法"></a>4.benchmark并行用法</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkSprints</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
  b<span class="token punctuation">.</span><span class="token function">RunParallel</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pb <span class="token operator">*</span>testing<span class="token punctuation">.</span>PB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> pb<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
      <span class="token comment" spellcheck="true">// do something </span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> 
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
</code></pre>
<ul>
<li>RunParallel并发的执行benchmark。RunParallel创建p个goroutine然后把b.N个迭代测试分布到这些goroutine上。</li>
<li>goroutine的数目默认是GOMAXPROCS。如果要增加non-CPU-bound的benchmark的并个数，在执行RunParallel之前那就使用<code>b.SetParallelism(p int)</code>来设置，最终goroutine个数就等于p * runtime.GOMAXPROCS(0)，。</li>
</ul>
<pre><code>numProcs := b.parallelism * runtime.GOMAXPROCS(0)
</code></pre>
<ul>
<li>所以并行的用法比较适合IO密集型的测试对象。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>前端三件套手记</title>
    <url>/posts/431ac75c.html</url>
    <content><![CDATA[<h1 id="三件套基础手记"><a href="#三件套基础手记" class="headerlink" title="三件套基础手记"></a>三件套基础手记</h1><h2 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h2><h3 id="1-1-iframe-标签：可以在页面上开辟一个小区域显示单独的页面"><a href="#1-1-iframe-标签：可以在页面上开辟一个小区域显示单独的页面" class="headerlink" title="1.1 iframe 标签：可以在页面上开辟一个小区域显示单独的页面"></a>1.1 iframe 标签：可以在页面上开辟一个小区域显示单独的页面</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
</code></pre>
<p>iframe和a标签组合使用的步骤：</p>
<ol>
<li>在iframe中使用name属性定义一个名称</li>
<li>在a标签的target属性上设置iframe的name的属性值</li>
</ol>
<p>1.2 form表单</p>
<table>
<thead>
<tr>
<th align="center">input type=text</th>
<th align="center">文件输入框</th>
<th align="center">value设置默认显示内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">input type=password</td>
<td align="center">密码输入框</td>
<td align="center">value设置默认显示内容</td>
</tr>
<tr>
<td align="center">input type=radio</td>
<td align="center">单选框</td>
<td align="center">name属性可以对其进行分组 checked=“checked”表示默认选中</td>
</tr>
<tr>
<td align="center">input type=checkbox</td>
<td align="center">复选框</td>
<td align="center">checked=“checked”表示默认选中</td>
</tr>
<tr>
<td align="center">input type=reset</td>
<td align="center">重置按钮</td>
<td align="center">value属性修改按钮上的文本</td>
</tr>
<tr>
<td align="center">input type=submit</td>
<td align="center">提交按钮</td>
<td align="center">value属性修改按钮上的文本</td>
</tr>
<tr>
<td align="center">input type=button</td>
<td align="center">按钮</td>
<td align="center">value属性修改按钮上的文本</td>
</tr>
<tr>
<td align="center">input type=file</td>
<td align="center">文件上传域</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">input type=hidden</td>
<td align="center">隐藏域</td>
<td align="center">当我们要发送某些信息，而这些信息不需要用户参与（提交的时候同时发送给服务器）</td>
</tr>
</tbody></table>
<p>表单提交的时候，数据没有发送给服务器的三种情况：</p>
<ol>
<li>表单项没有name属性值</li>
<li>单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器</li>
<li>表单项不再提交的form标签中</li>
</ol>
<p>GET请求的特点：</p>
<ol>
<li>浏览器地址栏内容：action属性+?+请求参数   请求参数的格式：name=value&amp;name=value</li>
<li>不安全</li>
<li>有数据长度的限制</li>
</ol>
<p>POST请求的特点：</p>
<ol>
<li>浏览器地址栏中只有action属性值</li>
<li>相对Get更安全</li>
<li>理论上没有数据长度的限制</li>
</ol>
<p>JavaScript和HTML结合使用：</p>
<p>方式一：在head或者body标签中，使用script标签来书写js代码</p>
<p>方式二：使用script标签引入单独的javascript代码文件</p>
<p>js函数的定义：</p>
<p>方式一：function关键字定义</p>
<p>方式二：var 函数名 = function(形参列表) {函数体}</p>
<p>js中的事件</p>
<p>常用事件：</p>
<ol>
<li>onload 加载完成事件                           页面加载完成之后，常用于做页面js代码初始化操作</li>
<li>onclick 单击事件                                  常用于按钮的点击响应操作</li>
<li>onblur 失去焦点事件                            常用于输入框失去焦点后验证其输入内容是否合法</li>
<li>onchange 内容发生改变事件               常用于下拉列表和输入框内容发生改变后操作</li>
<li>onsubmit 表单提交事件                       常用于表单提交前，验证所有表单项是否合法</li>
</ol>
<p>事件的注册：静态注册和动态注册</p>
<p>告诉浏览器，当事件响应后要执行哪些操作代码，叫做事件注册或绑定。</p>
<p>静态注册事件：通过html标签的事件属性直接赋予事件响应后的代码</p>
<p>动态注册事件：先通过js代码得到标签的dom对象，然后再通过dom对象.事件名=function(){}这种形式赋予事件响应后的代码。</p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//1.获取标签对象</span>
  <span class="token comment" spellcheck="true">//document 是js语言提供的一个对象，获取整个页面</span>
  <span class="token comment" spellcheck="true">//getElementById通过id属性获取标签对象</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//2.通过标签对象.事件名=function()&amp;#123;&amp;#125;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>静态注册的时候onsubmit里的return不能少，return false可以阻止表单提交</p>
]]></content>
      <categories>
        <category>前端篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h2 id="为什么应该使用流"><a href="#为什么应该使用流" class="headerlink" title="为什么应该使用流"></a>为什么应该使用流</h2><p>不用流的话，用户在接收到任何内容之前首先需要等待程序将文件内容完全读入到内存，这样用户体验不好；发送请求的时候，如果不是流就需要全部放到内存里，如果文件大的话就需要非常大的内存，如果使用流就只需要很小的内存去流式创建请求。</p>
]]></content>
  </entry>
  <entry>
    <title>个人博客搭建全程问题手录</title>
    <url>/posts/4cee0653.html</url>
    <content><![CDATA[<h1 id="个人博客搭建全程问题手录"><a href="#个人博客搭建全程问题手录" class="headerlink" title="个人博客搭建全程问题手录"></a>个人博客搭建全程问题手录</h1><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><p>SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</p>
<p>此问题可使用终端命令：git config –global –unset https.proxy解决（ps：都是两个减号），而且经常出现，每次都可用该命令，暂未知原因；</p>
<span id="more"></span>
<h2 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h2><p>终端登录github不是密码登录了，自2021.8.13开始使用token登录，token貌似只能看一次，关了就看不到了，记得保存。</p>
<p>token更新或生成步骤：</p>
<p>1.上github点击个人帅脸点击Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</p>
<h2 id="问题三："><a href="#问题三：" class="headerlink" title="问题三："></a>问题三：</h2><p>个人博客github和域名绑定：</p>
<p>1.进入博客根目录下的source文件，添加（没有先创建）CNAME文件，加上域名，返回根目录下vim打开_config.yml找到Deployment，改成下图，repo是你仓库的https地址</p>
<p><img src="/Users/zhanglinhui/Documents/Blog/source/resources/image-20220331153222275.png" alt="image-20220331153222275"></p>
<p>返回根目录下依次执行hexo clean、hexo g、hexo d</p>
<p>2.进入github打开博客仓库点击Settings -&gt; Pages 在Custom domain看到Save灰白不让点击说明成功</p>
<h2 id="问题四："><a href="#问题四：" class="headerlink" title="问题四："></a>问题四：</h2><p>hexo改主题也就是themes/next下的_config.yml中的Schemes改为Gemini时如果主题未发生改变，删除next文件下的.git文件夹（可能是隐藏文件夹）</p>
<h2 id="问题五："><a href="#问题五：" class="headerlink" title="问题五："></a>问题五：</h2><p>source/_data/styles.styl中添加背景透明度opacity写在body中，不要写在.main-inner中，会出现菜单栏点击不了的情况</p>
<h2 id="问题六："><a href="#问题六：" class="headerlink" title="问题六："></a>问题六：</h2><p>文章字数和阅读时间显示，hexo不同版本配置方法不同，之前的是hexo-wordcount插件，现在是hexo-symbols-count-time插件，然后主题配置如下：</p>
<pre><code>symbols_count_time:
  separated_meta: true
  item_text_post: true
  item_text_total: false
  awl: 4
  wpm: 275
</code></pre>
<p>站点配置（也就是根目录的_config.yml）如下：</p>
<pre><code>symbols_count_time:
  symbols: true
  time: true
  total_symbols: true
  total_time: true
</code></pre>
<p>注意最后需要hexo clean一下可能才能正常显示。</p>
<h2 id="问题七："><a href="#问题七：" class="headerlink" title="问题七："></a>问题七：</h2><p>添加站点和文章访问次数本地出现次数非常大，这是因为大家都用的这个url访问所以本地测试会很大，三部曲部署到远程就正常了。</p>
<h2 id="Note："><a href="#Note：" class="headerlink" title="Note："></a>Note：</h2><p>1.不必每次使用hexo clean、hexo g、hexo d三部曲，可以使用hexo s在本地localhost:4000查看效果，再三部曲上传远程。</p>
<p>2.三部曲后需要等一会网站才会更新</p>
<p>3.页面文章和标题透明度修改</p>
]]></content>
      <categories>
        <category>博客篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>二分（一）</title>
    <url>/posts/86e52f09.html</url>
    <content><![CDATA[<p>下面都是同类型的，相类似解法思路的二分题，一通百通。</p>
<span id="more"></span>
<h4 id="875-爱吃香蕉的珂珂"><a href="#875-爱吃香蕉的珂珂" class="headerlink" title="875. 爱吃香蕉的珂珂"></a><a href="https://leetcode-cn.com/problems/koko-eating-bananas/">875. 爱吃香蕉的珂珂</a></h4><p>珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p>
<p>珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。  </p>
<p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p>
<p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> piles<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> piles<span class="token punctuation">.</span>length<span class="token punctuation">,</span> maxn <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pile <span class="token operator">:</span> piles<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            maxn <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> pile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> maxn<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                count <span class="token operator">+=</span> <span class="token punctuation">(</span>piles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> m<span class="token punctuation">;</span> 
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> h<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="1552-两球之间的磁力"><a href="#1552-两球之间的磁力" class="headerlink" title="1552. 两球之间的磁力"></a><a href="https://leetcode-cn.com/problems/magnetic-force-between-two-balls/">1552. 两球之间的磁力</a></h4><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 n 个空的篮子，第 i 个篮子的位置在 position[i] ，Morty 想把 m 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p>
<p>已知两个球如果分别位于 x 和 y ，那么它们之间的磁力为 |x - y| 。</p>
<p>给你一个整数数组 position 和一个整数 m ，请你返回最大化的最小磁力。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> position<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> min_diff <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            min_diff <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min_diff<span class="token punctuation">,</span> position<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>position<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> min_diff<span class="token punctuation">,</span> r <span class="token operator">=</span> position<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> pre <span class="token operator">=</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> pre <span class="token operator">>=</span> mid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    pre <span class="token operator">=</span> position<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="1283-使结果不超过阈值的最小除数"><a href="#1283-使结果不超过阈值的最小除数" class="headerlink" title="1283. 使结果不超过阈值的最小除数"></a><a href="https://leetcode-cn.com/problems/find-the-smallest-divisor-given-a-threshold/">1283. 使结果不超过阈值的最小除数</a></h4><p>给你一个整数数组 nums 和一个正整数 threshold  ，你需要选择一个正整数作为除数，然后将数组里每个数都除以它，并对除法结果求和。</p>
<p>请你找出能够使上述结果小于等于阈值 threshold 的除数中 最小 的那个。</p>
<p>每个数除以除数后都向上取整，比方说 7/3 = 3 ， 10/2 = 5 。</p>
<p>题目保证一定有解。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">smallestDivisor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxn <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            maxn <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> maxn<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                count <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> threshold<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="二叉树一"><a href="#二叉树一" class="headerlink" title="二叉树一"></a>二叉树一</h1><p>力扣105.从前序与中序遍历序列构造二叉树</p>
<p>力扣445.序列化和反序列化二叉搜索树</p>
]]></content>
  </entry>
  <entry>
    <title>凸包模版</title>
    <url>/posts/161174bf.html</url>
    <content><![CDATA[<hr>
<hr>
<h1 id="凸包模版"><a href="#凸包模版" class="headerlink" title="凸包模版"></a>凸包模版</h1><p>叉积模版</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">det</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>凸包模版</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Java Version</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> trees<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//图中点的个数</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//是否是凸包边上的点</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//stk[] 是整型，存的是下标</span>
<span class="token keyword">int</span> tp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 初始化栈</span>
Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>trees<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//对点进行排序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 按照从小到大排序</span>
      <span class="token keyword">return</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 栈内添加第一个元素，且不更新 used，使得 1 在最后封闭凸包时也对单调栈更新</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tp <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   
        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">det</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             
          used<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// used 表示在凸壳上</span>
    stk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//允许线也是凸包的特例</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> trees<span class="token punctuation">;</span>
<span class="token keyword">int</span> tmp <span class="token operator">=</span> tp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tmp 表示下凸壳大小</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// ↓求上凸壳时不影响下凸壳</span>
      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>tp <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">det</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                used<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      stk<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tp<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 复制到新数组中去</span>
  ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> trees<span class="token punctuation">[</span>stk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> tp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//凸包边上点的个数</span>
        
</code></pre>
]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>凸包</tag>
        <tag>模版</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣954</title>
    <url>/posts/32961f55.html</url>
    <content><![CDATA[<h2 id="力扣954-二倍数对数组"><a href="#力扣954-二倍数对数组" class="headerlink" title="力扣954.二倍数对数组"></a>力扣954.二倍数对数组</h2><p>拿到题首先发现有负数存在，想到必然要分类去分析，自然想到正数从小到大分析，而负数应当从大到小分析，但是这题还是冷不丁会用到超时的解法的，没错，第一发超了T_T。</p>
<h3 id="解法一-ArrayList边找边删（超时）"><a href="#解法一-ArrayList边找边删（超时）" class="headerlink" title="解法一.ArrayList边找边删（超时）"></a>解法一.ArrayList边找边删（超时）</h3><p>看了remove源码，再次知道了它是copy删除元素后面的所有元素，然后重新放入原数组中，这样的操作时间复杂度必然是O(n)</p>
<pre><code>System.arraycopy(elementData, index+1, elementData, index, numMoved);
</code></pre>
<p>上面是一个静态本地方法，由虚拟机实现，下面是超时代码</p>
<pre><code>class Solution &#123;
    public boolean canReorderDoubled(int[] arr) &#123;
        int len = arr.length;
        Arrays.sort(arr);
        int count = 0;
        for(int i = 0; i &lt; len; i++)&#123;
            if(arr[i] &lt; 0)&#123;
                count++;
            &#125;
        &#125;
        if(count % 2 != 0)&#123;
            return false;
        &#125;
        List&lt;Integer&gt; list1 = new ArrayList&lt;&gt;();
        for(int j = 0; j &lt; count; j++)&#123;
            list1.add(arr[j]);
        &#125;
        while(list1.size() &gt; 1)&#123;
            if(list1.contains(list1.get(list1.size()-1) * 2))&#123;
                list1.remove(list1.indexOf(list1.get(list1.size()-1) * 2));
                list1.remove(list1.size()-1);
            &#125;
            else&#123;
                return false;
            &#125;
        &#125;
        list1 = new ArrayList&lt;&gt;();
        for(int j = count; j &lt; len; j++)&#123;
            list1.add(arr[j]);
        &#125;
        while(list1.size() &gt; 1)&#123;
            if(list1.contains(list1.get(0) * 2))&#123;
                list1.remove(list1.indexOf(list1.get(0) * 2));
                list1.remove(0);
            &#125;
            else&#123;
                return false;
            &#125;
        &#125;
        return true;
    &#125;
&#125;
</code></pre>
<p>由于while（list1.size() &gt; 1）时间复杂度是O(n)，总体复杂度是O(n^2)，也就超了。</p>
<p>沉思了会，首先考虑O(nlogn)能否实现，那么自然想到外层循环里用二分查找，但想了半天，也实现了下不可行，既然如此那就O(n) （这块处理的时间复杂度，排序复杂度先放一边）？想到HashMap统计每个元素的个数，然后遍历元素并对该元素*2对应的个数做减法，中间做判断确定是否返回false。下面附上该解法的代码。</p>
<h3 id="解法二-排序-HashMap："><a href="#解法二-排序-HashMap：" class="headerlink" title="解法二.排序+HashMap："></a>解法二.排序+HashMap：</h3><pre><code>class Solution &#123;
    public boolean canReorderDoubled(int[] arr) &#123;
        int len = arr.length;
        Arrays.sort(arr);
        int count = 0;
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for(int i = 0; i &lt; len; i++)&#123;
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            if(arr[i] &lt; 0)&#123;
                count++;
            &#125;
        &#125;
        if(count % 2 != 0)&#123;
            return false;
        &#125;
        for(int i = count-1; i &gt;= 0; i--)&#123;
            if(map.getOrDefault(arr[i] * 2, 0) &lt; map.get(arr[i]))&#123;
                return false;
            &#125;
            else&#123;
                map.put(arr[i] * 2, map.getOrDefault(arr[i] * 2, 0) - map.getOrDefault(arr[i], 0));
                map.put(arr[i], 0);
            &#125;
        &#125;
        for(int i = count; i &lt; len; i++)&#123;
            if(map.getOrDefault(arr[i] * 2, 0) &lt; map.get(arr[i]))&#123;
                return false;
            &#125;
            else&#123;
                map.put(arr[i] * 2, map.getOrDefault(arr[i] * 2, 0) - map.getOrDefault(arr[i], 0));
                map.put(arr[i], 0);
            &#125;
        &#125;
        
        return true;
    &#125;
&#125;
</code></pre>
<p>由于使用了Array.sort()，时间复杂度还是O(nlogn)，空间复杂度O(n)</p>
<p>接下来就是瞻仰各大神题解的时候，先放重头解法拓扑排序，时间复杂度O(n)，正好今天也学习下拓扑排序。</p>
<h3 id="解法三-成组构造-拓扑排序"><a href="#解法三-成组构造-拓扑排序" class="headerlink" title="解法三.成组构造+拓扑排序"></a>解法三.成组构造+拓扑排序</h3><p>他这个算法的思路和我上面的map解法有部分思想类似，拓扑排序从入度为0的点放入队列遍历然后删除对应的点的入度，当点入度为0就入队，最后看能不能进行拓扑排序，这个和上面两个for循环处理map个数是类似的。下面附上力扣宫水三叶的题解。</p>
<pre><code>class Solution &#123;
    static int N = 100010, M = 2 * N;
    static int[] cnts = new int[M * 2], in = new int[M * 2];
    public boolean canReorderDoubled(int[] arr) &#123;
        Arrays.fill(cnts, 0);
        Arrays.fill(in, 0);
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        for (int i : arr) &#123;
            if (++cnts[i + M] == 1 &amp;&amp; i != 0) list.add(i);
        &#125;
        if (cnts[0] % 2 != 0) return false;
        Deque&lt;Integer&gt; d = new ArrayDeque&lt;&gt;();
        for (int i : list) &#123;
            if (i % 2 == 0) &#123;
                in[i + M] = cnts[i / 2 + M];
                if (in[i + M] == 0) d.addLast(i);
            &#125; else &#123; 
                d.addLast(i);
            &#125;
        &#125;
        while (!d.isEmpty()) &#123;
            int t = d.pollFirst();
            if (cnts[t * 2 + M] &lt; cnts[t + M]) return false;
            cnts[t * 2 + M] -= cnts[t + M];
            in[t * 2 + M] -= cnts[t + M];
            if (in[t * 2 + M] == 0 &amp;&amp; cnts[t * 2 + M] != 0) d.addLast(t * 2);
            in[t * 4 + M] -= cnts[t + M];
            if (in[t * 4 + M] == 0 &amp;&amp; cnts[t * 4 + M] != 0) d.addLast(t * 4);
        &#125;
        return true;
    &#125;
&#125;

作者：AC_OIer
链接：https://leetcode-cn.com/problems/array-of-doubled-pairs/solution/by-ac_oier-d1z7/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
</code></pre>
]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>题解</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>在大型网络中查找有影响力社区</title>
    <url>/posts/76ecd668.html</url>
    <content><![CDATA[<h1 id="在大型网络中查找有影响力社区"><a href="#在大型网络中查找有影响力社区" class="headerlink" title="在大型网络中查找有影响力社区"></a>在大型网络中查找有影响力社区</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>1.<strong>社区查询</strong>就是在一个网络中查找满足查询条件的稠密连接子图。</p>
<p>2.本篇论文引入一个基于k-core的k-影响力社区的新的社区模型，该模型能获取社区的影响力。</p>
<p>3.基于新的模型概念，提出了线性时间在线搜索算法在网络中去找到top-r的k-影响力社区。</p>
<p>4.为了进一步加速查找，提出了线性空间的索引结构支持在最佳时间复杂度有效查找top-r的k-影响力社区。</p>
<p>5.提出了一个有效算法当网络频繁更新的时候去维护索引</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h4 id="定义1"><a href="#定义1" class="headerlink" title="定义1:"></a>定义1:</h4><p>生成子图影响力值的定义：生成子图里所有节点中的最小权值</p>
<h4 id="定义2"><a href="#定义2" class="headerlink" title="定义2:"></a>定义2:</h4><p>k-影响力社区是满足下列三个条件的生成子图：1.连接性：生成子图是连接的；2.内聚性：生成子图的每个节点的度至少为k；3.最大结构：不存在满足下面三个条件的其他的生成子图：1）该生成子图满足连接性和内聚性2）该子图包含前述子图3）两个子图的影响力值相等</p>
<h4 id="定义3"><a href="#定义3" class="headerlink" title="定义3:"></a>定义3:</h4><p>非包含k-影响力社区：该影响力社区不能包含一个影响力值比它大的社区</p>
<h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1:"></a>问题1:</h4><p>给定一个图，一个权值向量，两个参数k和r，问题是如何找到top-r最大影响力值的k-影响力社区</p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h4><p>给定一个图，一个权值向量，两个参数k和r，如何找到top-r最大影响力值的非包含k-影响力社区</p>
<h4 id="面临的挑战："><a href="#面临的挑战：" class="headerlink" title="面临的挑战："></a>面临的挑战：</h4><ol>
<li>k-影响力社区必须是连接子图，而k-core没有这个限制</li>
<li>k-影响力社区有最大结构的条件，但是k-core只需要没有更大的也是k-core图包含该子图</li>
</ol>
<p>因为这些条件，在一个图中最大k-core是唯一的，但是可能有多个非包含的k-影响力社区</p>
<h2 id="在线搜索算法"><a href="#在线搜索算法" class="headerlink" title="在线搜索算法"></a>在线搜索算法</h2><p>引理一：任何一个图的最大k-core的最大连接部分是一个k-影响力社区</p>
<p>引理二：对于任何一个k-影响力社区如果我们删除其中最小权值的节点后的结果图仍然包含一个最大k-core，那么这个最大k-core的最大连接部分就是一个k-影响力社区。</p>
<p>引理三：对于任何k-影响力社区如果删除其中最小权值的节点后的结果图不包含一个k-core，那么原来的图是一个非包含的k-影响力社区。</p>
<h3 id="basic算法"><a href="#basic算法" class="headerlink" title="basic算法"></a>basic算法</h3><h3 id="基于DFS的算法"><a href="#基于DFS的算法" class="headerlink" title="基于DFS的算法"></a>基于DFS的算法</h3><h2 id="基于索引查找的算法"><a href="#基于索引查找的算法" class="headerlink" title="基于索引查找的算法"></a>基于索引查找的算法</h2><p>该算法面临的两个方面的挑战：1）如何设计一个有效空间结构去存储所有的k-影响力社区 2）如何有效构建这样的索引</p>
<h3 id="ICP索引"><a href="#ICP索引" class="headerlink" title="ICP索引"></a>ICP索引</h3><h6 id="理论基础：对于每一个k，k-影响力社区来自于包含关系，基于这个包含关系，所有的k-影响力社区都可以被组织成树形结构。"><a href="#理论基础：对于每一个k，k-影响力社区来自于包含关系，基于这个包含关系，所有的k-影响力社区都可以被组织成树形结构。" class="headerlink" title="理论基础：对于每一个k，k-影响力社区来自于包含关系，基于这个包含关系，所有的k-影响力社区都可以被组织成树形结构。"></a>理论基础：对于每一个k，k-影响力社区来自于包含关系，基于这个包含关系，所有的k-影响力社区都可以被组织成树形结构。</h6><p>压缩方法：对于树中每一个非叶子节点，我们只存储不被子k-影响力社区包含的k-影响力社区的节点。</p>
<h3 id="初步的索引构造算法"><a href="#初步的索引构造算法" class="headerlink" title="初步的索引构造算法"></a>初步的索引构造算法</h3><p>（？：索引树中k影响力社区）</p>
<h3 id="新的索引构造算法"><a href="#新的索引构造算法" class="headerlink" title="新的索引构造算法"></a>新的索引构造算法</h3><p>不同于初步的索引构造算法按照递增k的顺序生成所有的树节点，新的算法是根据图节点权值递增生成树节点。</p>
<p>特别的，新算法根据图节点权值递增的顺序迭代删除节点，当算法在一次迭代中移除一个节点算法将生成一个对于所有k包含该节点的树节点，因此，如果所有节点都被删除，所有树节点都生成了。</p>
<p>合理性：初步的索引构造算法对于每一个k值，所有的树节点生成基于节点权值的递增顺序，因此考虑同时对于所有的k值按照递增顺序生成树节点。</p>
<p>怎么实现呢？注意到一个节点的core数</p>
<h3 id="查询处理算法"><a href="#查询处理算法" class="headerlink" title="查询处理算法"></a>查询处理算法</h3><p>对于问题1，根据对应的k找到对应的ICP索引树，然后根据子树根节点的权值输出top-r子树。</p>
<p>对于问题2，根据对应的k找到对应的ICP索引树，然后根据叶子结点的权值输出top-r叶子结点。</p>
<h2 id="网络的动态更新"><a href="#网络的动态更新" class="headerlink" title="网络的动态更新"></a>网络的动态更新</h2><h3 id="处理边插入（u，v）"><a href="#处理边插入（u，v）" class="headerlink" title="处理边插入（u，v）"></a>处理边插入（u，v）</h3><h5 id="两个基础更新规则："><a href="#两个基础更新规则：" class="headerlink" title="两个基础更新规则："></a>两个基础更新规则：</h5><p>规则1:  找出插入边两个点core的最小值Cmin，然后，在插入边之后，对应k值大于Cmin+1的ICP树不需要更新。因为插入一个边，结点的core数最多增加一。</p>
<p>规则2（懒更新）:  我们仅仅维护那些影响top-r结果的树节点。</p>
<p>引理4: 对于每一个ICP树，如果边的两个点的权值排名任意一个小于树节点时间戳排名，不需要更新，因为不会影响top-r结果</p>
<p>最小化树重计算方法：我们只考虑两种情况1）k值为1～Cmin的树 2）k值为Cmin+1的树</p>
<p>索引树节点是否要更新：使用类似算法2中DFS算法，从该树节点最小度的点开始，而且只访问在该树节点中的点且该点是它的邻居点。当邻居节点删除了，该点的度减少一，当该点的lw(i)值小于i的时候，该点删除。当DFS步骤结束的时候如果插入的边(u,v)的（假设u的Ru值更小）u点被删除了，那么包含u的该树节点不需要更新，因此所有的树节点不需要更新，理由如下。三个理由：1）插入的边不会影响到树的节点的时间戳小于边顶点中较小的点的Ru值的顶点  2）如果u删除了，所有其他的在u点所在树节点集合的点必定删除了，因此该树节点不需要更新  3）如果u删除了，所有u的出边也删除了，那么在插入边(u,v)后不会影响到时间戳大于Ru值的树节点</p>
<p>引理5: 当且仅当u没有被DFS步骤删除的时候，树1…Cmin在插入边(u,v)后树的节点才需要更新</p>
<p>对于情况2），如果插入边顶点的core值更新了，那就需要使用规则2更新树Cmin+1的树顶点，否则不需要更新</p>
<p>引理6: 对于每个树i（i = 1…Cmin），在删除边(u,v)后，当且仅当lu(i) &lt; i 或 lv(i) &lt; i时，需要更新ICP树的节点。</p>
<p>提醒2: 在现实应用中，当图中边频繁更新时，节点的权值可能也会更新，幸运的是，这个问题不会对我们的算法产生大的影响，理由是：首先，算法依赖节点的rank（不是权值），这样的话，即使节点权值更新了它的rank也不会变。第二，即使节点的rank更新了，如果它不是top-r结果，根据懒更新规则我们也不需要更新结果；第三，如果节点在top-r结果中同时它的rank更新了，我们也能使用下面的削减去减少这种情况产生的一系列边的更新。我们首先删除权值更新的点然后添加更新了权值的同样的点到图中。</p>
<h2 id="I-O效率算法"><a href="#I-O效率算法" class="headerlink" title="I/O效率算法"></a>I/O效率算法</h2><p>网络不能完全存放在主存中时。</p>
<p>算法的关键思想：按照树节点权值的递减顺序计算树节点，树拥有大权值节点可以安全删除不会影响算法计算小权值节点的正确性。</p>
<p>边的权值为两个点的最小权值，算法使用外存排序算法按照非递增顺序对边进行排序，然后在这个顺序下，算法加载边到主存中直到主存上限，随后，算法引用算法2去计算主存中的影响力社区，之后，算法从主存中删除计算出的影响力社区和相关的边随后加载新的边到主存直到主存上限。算法迭代执行这个步骤直到所有的边被扫描。</p>
]]></content>
      <categories>
        <category>论文篇</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<hr>
<h2 id="6-16"><a href="#6-16" class="headerlink" title="6.16"></a>6.16</h2><p>多路归并：378，373，</p>
]]></content>
  </entry>
  <entry>
    <title>子序列类动态规划</title>
    <url>/posts/6eb07b1f.html</url>
    <content><![CDATA[<h1 id="子序列类动态规划"><a href="#子序列类动态规划" class="headerlink" title="子序列类动态规划"></a>子序列类动态规划</h1><p>1.</p>
<h2 id="2-最长公共子序列"><a href="#2-最长公共子序列" class="headerlink" title="2.最长公共子序列"></a>2.最长公共子序列</h2><p>两个字符串s和t，s和t各抽出一个前缀子字符串，</p>
<ul>
<li>dp数组的定义：p[i][j]长度为i的子字符串，s当前位置i-1字符，与长度为j，t当前位置j-1字符，二者此时的相同子序列的长度。</li>
<li>确定递推公式：如果s[i-1] == t[j-1]，有p[i][j] = p[i-1][j-1] + 1，否则：p[i][j] = max(p[i][j-1], p[i-1][j])</li>
<li>初始状态：由于数组中有i-1和j-1不好处理边界情况，所以直接最上行和最右列加上一层方便处理。</li>
</ul>
<p>为了方便处理，这里使用了边界处理。</p>
<pre><code>class Solution &#123;
    public int longestCommonSubsequence(String text1, String text2) &#123;
        int len1 = text1.length(), len2 = text2.length();
        int[][] p = new int[len1+1][len2+1];
        for(int i = 1; i &lt;= len1; i++)&#123;
            for(int j = 1; j &lt;= len2; j++)&#123;
                if(text1.charAt(i-1) == text2.charAt(j-1))&#123;
                    p[i][j] = p[i-1][j-1] + 1;
                &#125;
                else&#123;
                    p[i][j] = Math.max(p[i][j-1], p[i-1][j]);
                &#125;
            &#125;
        &#125;
        return p[len1][len2];
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="字符串动态规划一"><a href="#字符串动态规划一" class="headerlink" title="字符串动态规划一"></a>字符串动态规划一</h1><p>力扣2262.字符串的总引力</p>
<p>力扣828.统计子串中的唯一字符</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<hr>
<hr>
<h1 id="我在工作中是如何使用-git-的"><a href="#我在工作中是如何使用-git-的" class="headerlink" title="我在工作中是如何使用 git 的"></a>我在工作中是如何使用 git 的</h1><p>1.你被分配了仓库的权限后，如何配置本地的Git环境并拉取代码？</p>
<ul>
<li><p>下载Git</p>
</li>
<li><p>在你的电脑生成ssh密钥，打开终端，执行ssh-keygen -t rsa -C “你公司内部邮箱地址”，如果执行成功，切换到～/.ssh目录下，复制id_rsa.pub内容。</p>
</li>
<li><p>在github上（以github为例），进入setting -&gt; SSH and GPG keys将上一步复制的内容（公钥）添加，点击add ssh key，公钥就放到了Github上进行托管</p>
</li>
<li><p>全局配置Git的用户名和邮箱</p>
<pre><code>git config --global user.name &quot;xxx&quot;
git config --global user.email &quot;xxx@xx.com&quot;
</code></pre>
</li>
</ul>
<h2 id="Git的工作区域和流程"><a href="#Git的工作区域和流程" class="headerlink" title="Git的工作区域和流程"></a>Git的工作区域和流程</h2><ul>
<li>Workspace：工作区</li>
<li>index：暂存区 git add</li>
<li>Repository：本地仓库 git commit</li>
<li>Remote：远程仓库 git push</li>
</ul>
<p>git fetch操作仅仅只会拉取远程的更改，不像git pull会自动进行merge操作。</p>
<h2 id="工作中使用Git解决问题的场景"><a href="#工作中使用Git解决问题的场景" class="headerlink" title="工作中使用Git解决问题的场景"></a>工作中使用Git解决问题的场景</h2><p>git rebase让你的提交记录更加清晰可读</p>
<p>git rebase和merge作用很相似，把一个分支的修改合并到当前分支上。</p>
<p>rebase产生冲突后，手动解决冲突后，依次使用git add、git rebase –continue的方式来处理冲突，如果不需要某次rebase的结果，那么需要使用git rebase –skip来跳过这次rebase操作</p>
<h3 id="git-merge和git-rebase的区别"><a href="#git-merge和git-rebase的区别" class="headerlink" title="git merge和git rebase的区别"></a>git merge和git rebase的区别</h3><p>不同于git rebase的是，git merge在不是fast-forward（快速合并）的情况下，会产生一条额外的合并记录，类似于Merge branch ‘xxx’ into ‘xxx’的一条提交信息。另外，在解决冲突的时候，用merge只需要解决一次冲突即可，简单粗暴，而用rebase的时候，需要依次解决每次的冲突，才可以提交。</p>
<h3 id="git-rebase交互模式"><a href="#git-rebase交互模式" class="headerlink" title="git rebase交互模式"></a>git rebase交互模式</h3><p>在开发中，常会遇到在一个分支上产生了很多的无效的提交，这种情况下使用rebase的交互模式可以把已经发生的多次提交压缩成一次提交，得到了一个干净的提交历史。</p>
<p>只能在自己使用的feature分支上进行rebase操作，不允许在集成分支上进行rebase，因为这种操作会修改集成分支的历史记录。</p>
<h3 id="使用git-cherry-pick获取制定的commit"><a href="#使用git-cherry-pick获取制定的commit" class="headerlink" title="使用git cherry-pick获取制定的commit"></a>使用git cherry-pick获取制定的commit</h3><p>git cherry-pick可以理解为“挑拣”提交，和merge合并一个分支的所有提交不同的是，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而只是想将某次提交合并到本地当前分支上，那么就要使用git cherry-pick了。</p>
<pre><code>git cherry-pick [commit-hash]
git cherry-pick &lt;first-commit-id&gt;...&lt;last-commit-id&gt; //左开右闭
git cherry-pick &lt;first-commit-id&gt;^...&lt;last-commit-id&gt; //表示first-commit-id到last-commit-id在内的提交都会被合并过去
</code></pre>
<p>commit-hash表示的是某次commit的hash值。</p>
<h3 id="使用git-revert回滚某次的提交"><a href="#使用git-revert回滚某次的提交" class="headerlink" title="使用git revert回滚某次的提交"></a>使用git revert回滚某次的提交</h3><p>想象这么一个场景，你的项目最近有2个版本要上线，这两个版本还伴随着之前遗留的 bug 的修复，一开始的时候，你将 bug 修复在了第一个版本的 release 分支上，突然在发版前一天，测试那边反馈，需要把第一个版本修复 bug 的内容改在第二个版本上，这个时候，第一个版本的集成分支的提交应该包括了第一个版本的功能内容，遗留 bug 修复的提交和其他同事提交的内容，想要通过 reset 的方式粗暴摘除之前的关于 bug 修复的 commit 肯定是不行的，同时，这种做法比较危险，此时，我们既不想破坏之前的提交记录，又想撤回我们遗留 bug 的 commit 记录应该怎么做呢？git revert 就派上了用场。</p>
<p>git revert撤销某次操作，此操作不会修改原本的提交记录，而是会新增一条提交记录来抵消某次操作</p>
<pre><code>git revert &lt;commit-id&gt; 针对普通commit
git revert &lt;commit-id&gt; -m 针对merge的commit
git revert [commit-id1] [commit-id2] ... 多次回滚，注意这是一个前开后闭区间
</code></pre>
<p>git revert和git reset区别</p>
<p>git revert会新建一条commit信息，来撤回之前的修改</p>
<p>git reset会直接将提交记录退回到指定的commit上</p>
<p>对于个人的 feature 分支而言，可以使用 <code>git reset</code> 来回退历史记录，之后使用 <code>git push --force</code> 进行推送到远程，但是如果是在多人协作的集成分支上，不推荐直接使用 <code>git reset</code> 命令，而是使用更加安全的 <code>git revert</code> 命令进行撤回提交。这样，提交的历史记录不会被抹去，可以安全的进行撤回。</p>
<h3 id="使用git-stash来暂存文件"><a href="#使用git-stash来暂存文件" class="headerlink" title="使用git stash来暂存文件"></a>使用git stash来暂存文件</h3><p>会有这么一个场景，现在你正在用你的 feature 分支上开发新功能。这时，生产环境上出现了一个 bug 需要紧急修复，但是你这部分代码还没开发完，不想提交，怎么办？这个时候可以用 <code>git stash</code> 命令先把工作区已经修改的文件暂存起来，然后切换到 hotfix 分支上进行 bug 的修复，修复完成后，切换回 feature 分支，从堆栈中恢复刚刚保存的内容。</p>
<pre><code>git stash //把本地的改动暂存起来
git stash save &quot;message&quot; 执行存储时，添加备注，方便查找。
git stash pop // 应用最近一次暂存的修改，并删除暂存的记录
git stash apply  // 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;$num&#125; 。
git stash list // 查看 stash 有哪些存储
git stash clear // 删除所有缓存的 stash
</code></pre>
<p>推荐在使用 stash 的相关命令时，每一次暂存的时候，不要直接使用  <code>git stash</code>  命令进行暂存下来，而是使用  <code>git stash save &quot;message...&quot;</code>  这种方式，给本次的提交做一个信息的记录。这样，想应用更改的时候，先通过 <code>git stash list</code> 查看一下所有的暂存列表。之后，推荐使用 <code>git stash apply stash@$&#123;num&#125;</code> 的方式进行应用对应的 stash，这样不会清空已有的 stash 的列表项，并且能应用到当前的工作区，不需要这个暂存的话，再手动清除就可以了。</p>
<h3 id="不同的工作区域撤销更改"><a href="#不同的工作区域撤销更改" class="headerlink" title="不同的工作区域撤销更改"></a>不同的工作区域撤销更改</h3><p>开发中，我们经常需要会退代码的操作，在不同的工作区域中，回退代码的方式是不相同的。</p>
<p>工作区：git checkout <filename></p>
<p>暂存区：git reset <filename></p>
<h3 id="配置git-alias提升工作效率"><a href="#配置git-alias提升工作效率" class="headerlink" title="配置git alias提升工作效率"></a>配置git alias提升工作效率</h3><p>一般我们在工作中，接到开发任务后，需要新创建一个分支进行开发  此时需要 用到 <code>git branch</code>、<code>git checkout</code>、 <code>git pull</code> 等命令，在我们一顿操作后，开发完成，到了提交代码的阶段，又要诸如此类 <code>git add</code> 、<code>git commit</code>、<code>git push</code>   等命令，虽然简单，但是输入起来也是不够简洁，作为一个程序员，开发程序就是为了提高我们的效率的，懒是人类进步的源泉，所以我们可以通过配置别名的方式，简化这些命令。</p>
<p>基本用法：</p>
<pre><code>git config --global alias.&lt;简化的字符&gt; 原始命令
</code></pre>
<p>参考文章来源</p>
<p>作者：政采云前端团队<br>链接：<a href="https://juejin.cn/post/6974184935804534815">https://juejin.cn/post/6974184935804534815</a><br>来源：稀土掘金</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="打开抖音互联网会发生什么"><a href="#打开抖音互联网会发生什么" class="headerlink" title="打开抖音互联网会发生什么"></a>打开抖音互联网会发生什么</h1><h2 id="1-quic（快速UDP互联网连接）"><a href="#1-quic（快速UDP互联网连接）" class="headerlink" title="1.quic（快速UDP互联网连接）"></a>1.quic（快速UDP互联网连接）</h2><ul>
<li>HTTP/1.0  能够在网络上获取文档内容的协议，通过GET请求的方式进行获取。但不支持持久性连接。</li>
<li>HTTP/1.1  解决了无持久性连接缺陷，还增加了缓存和控制模块。效率仍然不是很高，而且还有队头阻塞问题。</li>
<li>HTTP/2.0  采用了stream和分帧的方式解决队头阻塞问题。</li>
</ul>
<p>HTTP、HTTP/2.0使用TCP进行报文传输，而且还采用TLS协议进行加密，这样会导致三次握手的连接延迟：即TCP三次握手（一次）、TLS握手（两次）。</p>
<p>对于很多短连接场景，这种握手延迟影响较大，而且无法消除，QUIC使用UDP作为传输层协议，这样能减少三次握手的时间延迟。而且加密协议采用了TLS1.3，它允许客户端无需等待TLS握手完成就开始发送应用程序数据的操作，可以支持1RTT和0RTT，从而达到快速建立连接的效果。</p>
<p>虽然QUIC没有使用TCP协议，但是它也保证了可靠性，实现可靠性的机制是使用了Packet Number，这个可以认为是synchronize sequence number的替代者，序列号也是递增的。与syn不同，不管服务器有没有接收到数据包，这个Packet Number都会+1，而syn是只有服务器发送ack响应之后，syn才会+1.</p>
<p>数据可靠性如何保证：QUIC引入stream offset概念，一个stream可以传输多个stream offset，每个就是一个PN标识的数据，即使某个PN标识的数据丢失，PN+1后，它重传的仍旧是PN所标识的数据，等到所有PN标识的数据发送到服务器，就会进行重组，以此来保证数据可靠性。到达服务器的stream offset会按照顺序进行组装，这也保证了顺序性。</p>
<p>QUIC协议的一个重要特点：可插拔性，能够动态更新和升级，QUIC在应用层实现了拥塞控制算法，不需要操作系统和内核的支持，遇到拥塞控制算法切换时，只需要在服务器重新加载一遍即可，不需要停机重启。</p>
<p>TCP头部没有经过加密和认证，所以在传输的过程中很可能被篡改，QUIC的报文头部是经过认证的，报文也经过加密处理，保证了安全性。</p>
<p>连接平滑迁移：你的手机后者移动设备在4G信号下和WiFi等网络情况下切换，不会断线重连，用户甚至无任何感知，能够直接实现平滑的信号切换。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="打开抖音互联网会发生什么？"><a href="#打开抖音互联网会发生什么？" class="headerlink" title="打开抖音互联网会发生什么？"></a>打开抖音互联网会发生什么？</h1><h2 id="1-刷抖音网络是怎么交互的？"><a href="#1-刷抖音网络是怎么交互的？" class="headerlink" title="1.刷抖音网络是怎么交互的？"></a>1.刷抖音网络是怎么交互的？</h2><p>网络接入</p>
<p>网络传输</p>
<h3 id="1-1-网络接入–互联网"><a href="#1-1-网络接入–互联网" class="headerlink" title="1.1 网络接入–互联网"></a>1.1 网络接入–互联网</h3><h3 id="1-2-网络接入–路由"><a href="#1-2-网络接入–路由" class="headerlink" title="1.2 网络接入–路由"></a>1.2 网络接入–路由</h3><p>往同网段如何发包/交互？交换机作同网段（SDN技术）</p>
<p>路由一定是对称的吗？不一定。</p>
<p>路由是工作在哪一层？具体情况具体分析，动态路由BGP/OSPF等就是运行在TCP上的就是传输层</p>
<p>路由是改的IP地址吗？不是，路由是改Mac，找到发包口</p>
<h3 id="1-3-网络接入"><a href="#1-3-网络接入" class="headerlink" title="1.3 网络接入"></a>1.3 网络接入</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><ul>
<li>逻辑同网段才能发送ARP</li>
<li>ARP请求广播，ARP应答单播</li>
<li>免费ARP？ARP代理？</li>
</ul>
<p>ARP本质上是查找下一跳的MAC，不是请求目标地址</p>
<h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><ul>
<li>唯一标识，互联网通用。抖音客户端和服务端各一个。</li>
<li>Mac地址不能代替IP地址吗，为什么？不能</li>
<li>IPV4不够用，一般怎么解决的？</li>
</ul>
<h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><ul>
<li>家里路由器是怎样上网的？</li>
<li>多个内网客户端访问同一个目标地址+端口，源端口恰好一样，冲突了怎么办？nat服务器维护一张表，如果已经存在相同的线路，那就改源端口</li>
</ul>
<h3 id="1-4-网络传输–数据包"><a href="#1-4-网络传输–数据包" class="headerlink" title="1.4 网络传输–数据包"></a>1.4 网络传输–数据包</h3><h3 id="1-5-先请求DNS"><a href="#1-5-先请求DNS" class="headerlink" title="1.5 先请求DNS"></a>1.5 先请求DNS</h3><ul>
<li>客户端发<a href="http://www.douyin.com的解析请求/">www.douyin.com的解析请求</a></li>
<li>递归解析器去问”.”，com.去哪里解析</li>
<li>递归解析器去问”com.”，douyin.com去哪里解析</li>
<li>douyin.com告诉递归解   <a href="http://www.douyin.com解析到xxx/">www.douyin.com解析到xxx</a></li>
</ul>
<h3 id="1-6-DNS的传输协议UDP"><a href="#1-6-DNS的传输协议UDP" class="headerlink" title="1.6 DNS的传输协议UDP"></a>1.6 DNS的传输协议UDP</h3><p>想发什么包，就分配一个UDP的头，把payload里面塞数据发出去就好。</p>
<p>怎么保证协议可靠</p>
<h3 id="1-7-TCP三次握手"><a href="#1-7-TCP三次握手" class="headerlink" title="1.7 TCP三次握手"></a>1.7 TCP三次握手</h3><p>拔了网线，连接会断吗？</p>
<p>tcpdump抓包+wireshark包分析</p>
<h3 id="1-8-TCP传输"><a href="#1-8-TCP传输" class="headerlink" title="1.8 TCP传输"></a>1.8 TCP传输</h3><p>sequence number和acknowledge number</p>
<ul>
<li>为什么老问Timewait？</li>
<li>丢包怎么办？</li>
<li>滑动窗口和流量控制/拥塞控制</li>
</ul>
<h3 id="1-9-HTTP-HTTP1-1"><a href="#1-9-HTTP-HTTP1-1" class="headerlink" title="1.9 HTTP/HTTP1.1"></a>1.9 HTTP/HTTP1.1</h3><ul>
<li>为什么不直接用TCP通信？</li>
<li>为什么互联网上那么多HTTP通信？</li>
</ul>
<h3 id="1-10-HTTPS"><a href="#1-10-HTTPS" class="headerlink" title="1.10 HTTPS"></a>1.10 HTTPS</h3><ul>
<li>传输中被插入小网站怎么办？</li>
<li>HTTPS解密出来依然是HTTP</li>
</ul>
<h3 id="1-11-SSL-TLS握手"><a href="#1-11-SSL-TLS握手" class="headerlink" title="1.11 SSL/TLS握手"></a>1.11 SSL/TLS握手</h3><p>对称加密和非对称加密</p>
<h2 id="2-网络架构怎么给抖音提质"><a href="#2-网络架构怎么给抖音提质" class="headerlink" title="2.网络架构怎么给抖音提质"></a>2.网络架构怎么给抖音提质</h2><h3 id="2-1-HTTP2-0"><a href="#2-1-HTTP2-0" class="headerlink" title="2.1 HTTP2.0"></a>2.1 HTTP2.0</h3><p>重要思想：多路复用</p>
<h3 id="2-2-怎么理解多路复用-stream"><a href="#2-2-怎么理解多路复用-stream" class="headerlink" title="2.2 怎么理解多路复用/stream"></a>2.2 怎么理解多路复用/stream</h3><ul>
<li>单个TCP链接传输</li>
<li>如果TCP丢包怎么办</li>
</ul>
<h3 id="2-3-QUIC-HTTP3-0"><a href="#2-3-QUIC-HTTP3-0" class="headerlink" title="2.3 QUIC/HTTP3.0"></a>2.3 QUIC/HTTP3.0</h3><ul>
<li>TCP or UDP？</li>
<li>Kernel or Userspace （用户态还是内核态）</li>
<li>0 RTT</li>
<li>弱网优势</li>
</ul>
<h3 id="除了协议优化，网络路径能不能优化？"><a href="#除了协议优化，网络路径能不能优化？" class="headerlink" title="除了协议优化，网络路径能不能优化？"></a>除了协议优化，网络路径能不能优化？</h3><h3 id="2-4-数据中心分布"><a href="#2-4-数据中心分布" class="headerlink" title="2.4 数据中心分布"></a>2.4 数据中心分布</h3><p>核心机房、POP接入、边缘机房</p>
<h3 id="2-5-网络提速–同运营商访问"><a href="#2-5-网络提速–同运营商访问" class="headerlink" title="2.5 网络提速–同运营商访问"></a>2.5 网络提速–同运营商访问</h3><p>通过解析去做，解析ip是哪个运营商</p>
<h3 id="2-6-静态资源（图片视频）路径优化（CDN）"><a href="#2-6-静态资源（图片视频）路径优化（CDN）" class="headerlink" title="2.6 静态资源（图片视频）路径优化（CDN）"></a>2.6 静态资源（图片视频）路径优化（CDN）</h3><h3 id="2-7-动态API（播放-评论接口）路径优化（DSA）"><a href="#2-7-动态API（播放-评论接口）路径优化（DSA）" class="headerlink" title="2.7 动态API（播放/评论接口）路径优化（DSA）"></a>2.7 动态API（播放/评论接口）路径优化（DSA）</h3><h3 id="2-8-容灾概念"><a href="#2-8-容灾概念" class="headerlink" title="2.8 容灾概念"></a>2.8 容灾概念</h3><p>故障发生–故障感知–自动切换–服务恢复</p>
<h3 id="2-9-故障排查"><a href="#2-9-故障排查" class="headerlink" title="2.9 故障排查"></a>2.9 故障排查</h3><p>故障明确-故障止损-分段排查</p>
<h3 id="2-10-故障明确"><a href="#2-10-故障明确" class="headerlink" title="2.10 故障明确"></a>2.10 故障明确</h3><ul>
<li>什么业务？什么接口故障？</li>
<li>故障体现在哪里？</li>
<li>访问其他目标是否正常？</li>
<li>是否是修改导致的异常？</li>
</ul>
<h3 id="2-11-故障止损"><a href="#2-11-故障止损" class="headerlink" title="2.11 故障止损"></a>2.11 故障止损</h3><p>先止损再排查：1）用户体验第一 2）对公司收入的影响是按照分钟甚至秒来计算</p>
<p>如何止损：1）组件没有容灾，但是系统有没有？ 2）降级</p>
<h3 id="2-12-分段排查"><a href="#2-12-分段排查" class="headerlink" title="2.12 分段排查"></a>2.12 分段排查</h3><p>客户端排查：1）客户端访问其他服务没问题吗  2）其他客户端访问目标服务没问题吗</p>
<p>服务端排查：1）服务端监控/指标都正常吗 2）手动访问一下正常吗 3）分组件排查</p>
<p>中间链路排查：1）服务端跟客户端确保都没问题 2）中间网络设备有没有问题（交换机/路由器/网关LB）3）旁路的DNS有没有问题</p>
<h3 id="2-13-网络故障排查常用命令"><a href="#2-13-网络故障排查常用命令" class="headerlink" title="2.13 网络故障排查常用命令"></a>2.13 网络故障排查常用命令</h3><ul>
<li>dig查询DNS问题</li>
<li>ping/telnet/nmap查询三层/四层连通性</li>
<li>Traceroute排查中间链路</li>
<li>iptabels</li>
<li>tcpdump</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="抖音项目笔记"><a href="#抖音项目笔记" class="headerlink" title="抖音项目笔记"></a>抖音项目笔记</h1><ol>
<li><p>在自己本地电脑运行服务端代码，电脑模拟器安卓手机app访问服务端，将Url改成<code>10.0.2.2:port</code></p>
</li>
<li><p>go中同一个包下不同文件可以直接调用全局变量、函数，但是要全编译，而且需要将所有的文件的package都命名为相同包名。（需要点击包名运行这样才能全编译）</p>
</li>
</ol>
<p>创建数据库，连接mysql数据库，repository提供查询、插入、删除、更改接口，用于CURD用户信息，</p>
<ul>
<li>init函数不能被其他函数调用，而是在main函数执行之前，自动被调用</li>
</ul>
<p>gorm连接数据库：</p>
<pre><code>db, err := gorm.Open(mysql.Open(&quot;user:password@tcp(127.0.0.1:3306)/douyin&quot;))
</code></pre>
<p><code>user</code>是数据库用户名，<code>password</code>是数据库密码，<code>douyin</code>是数据库名</p>
<p>map使用前要初始化：</p>
<pre class=" language-go"><code class="language-go">map1 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">)</span>
</code></pre>
<p>本地</p>
]]></content>
  </entry>
  <entry>
    <title>数据库基本语法</title>
    <url>/posts/e6ea7883.html</url>
    <content><![CDATA[<h1 id="数据库基础语法"><a href="#数据库基础语法" class="headerlink" title="数据库基础语法"></a>数据库基础语法</h1><h2 id="一-SELECT"><a href="#一-SELECT" class="headerlink" title="一.SELECT"></a>一.SELECT</h2><h3 id="1-1列的别名"><a href="#1-1列的别名" class="headerlink" title="1.1列的别名"></a>1.1列的别名</h3><p>1）空格</p>
<pre><code>SELECT A B FROM X;
</code></pre>
<p>2）AS</p>
<pre><code>SELECT A AS B FROM X;
</code></pre>
<p>3）一对引号</p>
<pre><code>SELECT A &quot;B&quot; FROM X;
</code></pre>
<span id="more"></span>
<p>1.2 空值参与运算：结果一定也为空。解决方案：引入IFNULL</p>
<p>1.3 着重号‘’：解决关键字</p>
<p>1.4 显示表结构，两种效果一样</p>
<pre><code>DESCRIBE employees;
DESC emploees;
</code></pre>
<p>1.5 等号运算符</p>
<p>1）=规则</p>
<ul>
<li>如果等号两边的值一个是整数，一个是字符串，则MySQL会将字符串转化为数字进行比较</li>
<li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL</li>
</ul>
<p>2）安全等于运算符（&lt;=&gt;）规则</p>
<p>和=唯一的区别是&lt;=&gt;可以用来对NULL进行判断，在两个操作数均为NULL时，返回值是1，而不是NULL；当有一个为NULL时，返回值为0，而不是NULL。</p>
<p>1.6 别名的使用</p>
<p><strong>列的别名只能在ORDER BY中使用，不能在WHERE中使用，会报错，因为WHERE是在别名之前作用的</strong> </p>
<p>1.7 多级排序</p>
<pre><code>ORDER BY 列1 DESC, 列2 ASC ....
</code></pre>
<p>1.8 LIMIT  （约束返回结果的数量可以减少数据表的网络传输量，也可以提高查询效率）</p>
<p>Mysql 8.0新特性</p>
<pre><code>LIMIT ... OFFSET ...
</code></pre>
<p>1.9 多表连接</p>
<p>为什么要多表，而不合在一张表：</p>
<ul>
<li>冗余，多表合在一块可能会产生大量冗余的数据</li>
<li>I/O效率低，合在一块表的大小会比原来多表大，查询等操作需要将表从磁盘加载到内存，I/O开销大</li>
<li>对并发不友好，合成一张表了每次只能允许一个用户访问，多表的话可以有多个不同的用户访问不同的表</li>
</ul>
<p>建议：从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表</p>
<p>注意：一旦在SELECT或WHERE中使用表名的话，则必须使用表的别名，而不能再使用表的原名</p>
<p>结论：如果有n个表实现多表的查询，则至少需要n-1个连接条件</p>
<p>1.10 外连接 vs 内连接</p>
<p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表和另一个表不匹配的行。</p>
<p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表和另一个表匹配的行之外，还查询到了左表 或 右表中不匹配的行。（一旦出现“所有”，并且不同的列来自不同的表，就是外连接）</p>
<p>外连接的分类：左外连接、右外连接、满外连接</p>
<p>左外连接：两个表在连接过程中除了返回满足连接条件的行外还返回左表中不满足条件的行。右外连接同理</p>
<p>SQL99语法：左外连接-&gt;LEFT OUTER ON      右外连接-&gt;RIGHT OUTER ON       满外连接-&gt;</p>
<p>1.11 UNION</p>
<p>UNION 和 UNION ALL推荐使用后者，因为前者去重效率低。</p>
<p>1.12 SQL99语法的新特性1: 自然连接 2: USING</p>
<p>自然连接：NATURAL JOIN  它会帮你自动查询两张连接表中‘所有相同的字段’，然后进行‘等值连接’。</p>
<p>USING只能和JOIN一起使用，而且要求两个关联字段在关联表中名称一致，而且只能表示管理那个字段值相等。</p>
<p>1.13 加密和解密函数</p>
<p>PASSWORD、ENCODE\DECODE在mysql8.0中弃用</p>
<p>MD5</p>
<p>1.14 GROUP BY</p>
<p>SELECT中出现的非组函数的字段必须声明在GROUP BY中，但GROUP BY中声明的字段可以不出现在SELECT中。</p>
<p>1.15 HAVING</p>
<p>如果过滤条件中使用了聚合函数，则必须使用HAVING来替换WHERE，否则报错。</p>
<p>HAVING必须声明在GROUP BY后面。开发中，使用HAVING前提是SQL使用了GROUP BY。</p>
<p>WHERE和HAVING对比：</p>
<ul>
<li>从适用范围上来说，HAVING的范围更广</li>
<li>如果过滤条件没有聚合函数，则WHERE效率更好</li>
</ul>
<p>1.16 SQL底层执行原理</p>
<p>SQL99语法：</p>
<p>序号代表执行顺序</p>
<pre class=" language-sql"><code class="language-sql"><span class="token number">5</span><span class="token punctuation">.</span><span class="token keyword">SELECT</span>      可写子查询
<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span>  <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span>     可写子查询
<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span>      可写子查询
<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    不可
<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span>      可写子查询
<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    可写子查询
<span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">LIMIT</span>      不可
</code></pre>
<p>SQL语句的执行过程：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">LEFT</span><span class="token operator">/</span><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">HAVING</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">DISTINCT</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">LIMIT</span>
</code></pre>
<p>1.17 子查询</p>
<p>分类1：从内查询返回的结果的条目数     单行子查询VS多行子查询</p>
<p>分类2：内查询是否被执行多次    相关子查询VS不相关子查询</p>
<p>多行子查询操作符：IN，ANY，ALL，SOME（同ANY）</p>
<p>MYSQL中聚合函数是不能嵌套的</p>
<p>空值问题，子查询的结果有null值要额外注意</p>
<p>相关子查询：按照一行接一行的顺序执行，主查询的每一行都执行一次子查询</p>
<p>1.18 TRUNCATE 和 DELETE FROM</p>
<p>相同点：都可以实现对表中所有数据的删除，同时保留表结构</p>
<p>不同点：TRUNCATE TABLE：一旦执行此操作，表数据全部清除，同时，数据是不可以回滚的。 DELETE FROM：一旦执行此操作，表数据可以全部清除（不带WHERE），同时，数据是可以实现回滚的。</p>
<p>1.19 DDL和DML的说明</p>
<p>DDL的操作一旦执行，就不可回滚。指令SET autocommit = FALSE对DDL操作失效。（因为在执行完DDL操作之后，一定会执行一次COMMIT）</p>
<p>DML的操作默认是一旦执行不可回滚的，但是，如果在执行DML之前，执行了SET autocommit = FALSE，则执行的DML操作就可以实现回滚。DML语句默认会自动提交</p>
<p>1.20 Mysql8.0的新特性：DDL的原子化</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mytest<span class="token punctuation">;</span>
<span class="token keyword">USE</span> mytest<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span><span class="token punctuation">(</span>
book_id <span class="token keyword">INT</span><span class="token punctuation">,</span>
book_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> book1<span class="token punctuation">,</span> book2<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//这里的book1没被删除，这就是原子操作</span>
<span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>数据库篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基础</title>
    <url>/posts/eb03cdad.html</url>
    <content><![CDATA[<h1 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h1><h2 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h2><h3 id="1-1-试图的理解"><a href="#1-1-试图的理解" class="headerlink" title="1.1 试图的理解"></a>1.1 试图的理解</h3><ol>
<li>视图可以看作是一个虚拟表，本身是不存储数据的，视图的本质，可以看作是存储起来的SELECT语句</li>
<li>视图中的SELECT语句中涉及到的表，称为基表</li>
<li>针对视图做DML操作，会影响到对应的基表中的数据，反之亦然</li>
<li>视图本身的删除，不会导致基表中数据的删除</li>
<li>视图的应用场景：针对小型项目，不推荐使用视图，针对大型项目，可以考虑使用视图</li>
<li>优点：简化查询；控制数据的访问权限<span id="more"></span>
<h3 id="1-2-创建视图"><a href="#1-2-创建视图" class="headerlink" title="1.2 创建视图"></a>1.2 创建视图</h3></li>
</ol>
<h3 id="1-3-查看视图"><a href="#1-3-查看视图" class="headerlink" title="1.3 查看视图"></a>1.3 查看视图</h3><ol>
<li><p>查看数据库的表对象、视图对象  </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span>；
</code></pre>
</li>
<li><p>查看视图的结构</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span> 视图名
</code></pre>
</li>
<li><p>查看视图的属性信息</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'视图名'</span>
</code></pre>
</li>
<li><p>查看视图的详细定义信息</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名
</code></pre>
</li>
</ol>
<h2 id="2-存储过程与函数"><a href="#2-存储过程与函数" class="headerlink" title="2.存储过程与函数"></a>2.存储过程与函数</h2><h3 id="2-1-理解"><a href="#2-1-理解" class="headerlink" title="2.1 理解"></a>2.1 理解</h3><p>一组经过预先编译的SQL语句的封装。</p>
<p>执行过程：存储过程预先存储在Mysql服务器上，需要执行的时候，客户端只需要向服务器发送调用存储过程的命令，服务器端就可以把预先存储好的一系列语句全部执行。</p>
<p>好处：</p>
<ol>
<li>简化操作，提高了sql语句的重用性，减少了开发程序员的压力</li>
<li>减少操作过程中的失误，提高效率</li>
<li>减少网络传输量</li>
<li>减少了sql语句暴露在网上的风险，提高了数据查询的安全性</li>
</ol>
<h3 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h3><h2 id="3-触发器"><a href="#3-触发器" class="headerlink" title="3.触发器"></a>3.触发器</h2>]]></content>
      <categories>
        <category>数据库篇</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<p>解决多值对象决策问题</p>
<p>首先，提出结合索引（包括度邻居索引和倒置索引去管理多值网络），然后提出SCDCI算法去计算skyline社区。</p>
]]></content>
  </entry>
  <entry>
    <title>点到线段的距离</title>
    <url>/posts/f71303a2.html</url>
    <content><![CDATA[<h1 id="点到线段的距离"><a href="#点到线段的距离" class="headerlink" title="点到线段的距离"></a>点到线段的距离</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">point</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">line</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  point st<span class="token punctuation">,</span> ed<span class="token punctuation">;</span>
  <span class="token keyword">int</span> k<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">line</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span> point b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ed <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//针对点是double类型可加下面这段代码提高精确度</span>
  <span class="token comment" spellcheck="true">//if(Math.abs(x) &lt; 1e-6) &amp;#123; return 0; &amp;#125;</span>
  <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">dis</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span> point b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">cmult</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span>point b<span class="token punctuation">,</span>point c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">///叉积</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token operator">-</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>x<span class="token operator">-</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">pmult</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span>point b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">///点积 这里的ab表示的是向量</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">*</span> b<span class="token punctuation">.</span>x <span class="token operator">+</span> a<span class="token punctuation">.</span>y <span class="token operator">*</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">pldis</span><span class="token punctuation">(</span>point a<span class="token punctuation">,</span>line l<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  point s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  point s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  point s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  s1<span class="token punctuation">.</span>x <span class="token operator">=</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
  s1<span class="token punctuation">.</span>y <span class="token operator">=</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>y <span class="token operator">-</span> l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  s2<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>x<span class="token punctuation">;</span> s2<span class="token punctuation">.</span>y <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  s3<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>x<span class="token punctuation">;</span>s3<span class="token punctuation">.</span>y <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>x <span class="token operator">==</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>st<span class="token punctuation">.</span>y <span class="token operator">==</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">dis</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">pmult</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">///两向量成钝角</span>
    <span class="token keyword">return</span> <span class="token function">dis</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token function">pmult</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">dis</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span><span class="token comment" spellcheck="true">///该处为c在线段上方</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">cmult</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>st<span class="token punctuation">,</span> a<span class="token punctuation">,</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">dis</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>st<span class="token punctuation">,</span> l<span class="token punctuation">.</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///两向量组成的三角形的面积为此两向的叉积的二倍，所以知道面积和底边就可以求出高</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>模版</tag>
        <tag>计算几何</tag>
        <tag>距离</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树初探</title>
    <url>/posts/44ba5333.html</url>
    <content><![CDATA[<h1 id="线段树初探"><a href="#线段树初探" class="headerlink" title="线段树初探"></a>线段树初探</h1><h2 id="1-什么是线段树"><a href="#1-什么是线段树" class="headerlink" title="1.什么是线段树"></a>1.什么是线段树</h2><span id="more"></span>
<h2 id="2-线段树的基本操作"><a href="#2-线段树的基本操作" class="headerlink" title="2.线段树的基本操作"></a>2.线段树的基本操作</h2><h3 id="2-1-建树"><a href="#2-1-建树" class="headerlink" title="2.1 建树"></a>2.1 建树</h3><h3 id="2-2-点更新"><a href="#2-2-点更新" class="headerlink" title="2.2 点更新"></a>2.2 点更新</h3><h3 id="2-3-区间查询"><a href="#2-3-区间查询" class="headerlink" title="2.3 区间查询"></a>2.3 区间查询</h3><h3 id="2-4-区间更新"><a href="#2-4-区间更新" class="headerlink" title="2.4 区间更新"></a>2.4 区间更新</h3>]]></content>
      <categories>
        <category>算法篇</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="高性能Go语言发行版优化与落地实践"><a href="#高性能Go语言发行版优化与落地实践" class="headerlink" title="高性能Go语言发行版优化与落地实践"></a>高性能Go语言发行版优化与落地实践</h1><h2 id="1-自动内存管理"><a href="#1-自动内存管理" class="headerlink" title="1. 自动内存管理"></a>1. 自动内存管理</h2><h3 id="1-1自动内存管理"><a href="#1-1自动内存管理" class="headerlink" title="1.1自动内存管理"></a>1.1自动内存管理</h3><p>动态内存：程序在运行时根据需求动态分配的内存：malloc（）</p>
<p>自动内存管理（垃圾回收）：由程序语言的运行时系统管理动态内存</p>
<ul>
<li>避免手动内存管理，专注于实现业务逻辑</li>
<li>保证内存使用的正确性和安全性：double-free problem, use-after-free problem</li>
</ul>
<p>三个任务：</p>
<ul>
<li>为新对象分配空间</li>
<li>找到存活对象</li>
<li>回收死亡对象的内存空间</li>
</ul>
<p>相关概念：</p>
<ul>
<li>Mutator：业务线程，分配新对象，修改对象指向关系</li>
<li>Collector：GC线程，找到存活对象，回收死亡对象的内存空间</li>
<li>Serial GC：只有一个collector</li>
<li>Parallel GC：支持多个collectors同时回收的GC算法</li>
<li>Concurrent GC：mutator(s) 和 collector(s) 可以同时执行  collectors必须感知对象指向关系的改变！</li>
</ul>
<p>评价GC算法：</p>
<ul>
<li>安全性：不能回收存活的对象基本要求</li>
<li>吞吐率：1 - GC时间 / 程序执行总时间    花在GC上的时间</li>
<li>暂停时间：stop the world（STW）业务是否感知</li>
<li>内存开销 GC元数据开销</li>
</ul>
<p>追踪垃圾回收</p>
<p>引用计数</p>
<h3 id="1-2-追踪垃圾回收"><a href="#1-2-追踪垃圾回收" class="headerlink" title="1.2 追踪垃圾回收"></a>1.2 追踪垃圾回收</h3><ul>
<li>对象被回收的条件：指针指向关系不可达的对象</li>
<li>标记根对象    静态变量、全局变量、常量、线程栈等</li>
<li>标记：找到可达对象     求指针指向关系的传递闭包：从根对象出发，找到所有可达对象</li>
<li>清理：所有不可达对象    1）将存活对象复制到另外的内存空间Copying GC  2）将死亡对象的内存标记为 ‘可分配’（使用free list管理空闲内存）Mark-sweep GC  2）移动并整理存活对象（原地整理对象） Mark-compact GC</li>
<li>根据对象的生命周期，使用不同的标记和清理策略</li>
</ul>
<h3 id="1-3-分代GC"><a href="#1-3-分代GC" class="headerlink" title="1.3 分代GC"></a>1.3 分代GC</h3><ul>
<li>分代假说</li>
<li>intuition：很多对象在分配出来后很快就不再使用了</li>
<li>每个对象都有年龄：经历过GC的次数</li>
<li>目的：对年轻和老年的对象，制定不同的GC策略，降低整体内存管理的开销</li>
<li>不同年龄的对象处于heap的不同区域</li>
</ul>
<p>年轻代：</p>
<ul>
<li>常规的对象分配</li>
<li>由于存活对象很少，可以采用copying collection</li>
<li>GC吞吐率很高</li>
</ul>
<p>老年代：</p>
<ul>
<li>对象趋向于一直活着，反复复制开销较大</li>
<li>可以采用mark-sweep collection</li>
</ul>
<h3 id="1-4-引用计数"><a href="#1-4-引用计数" class="headerlink" title="1.4 引用计数"></a>1.4 引用计数</h3><p>每个对象那个都有一个与之关联的引用数目</p>
<p>对象存活的条件：当且仅当引用数大于0</p>
<p>优点：</p>
<ul>
<li>内存管理的操作被平摊到程序执行过程中</li>
<li>内存管理不需要了解runtime的实现细节：C++智能指针</li>
</ul>
<p>缺点：</p>
<ul>
<li>维护引用计数的开销较大：通过原子操作保证对引用计数操作的原子性和可见性</li>
<li>无法回收环形数据结构—–weak reference</li>
<li>内存开销：每个对象都引入的额外内存空间存储引用数目</li>
<li>回收内存时依然可能引发暂停</li>
</ul>
<h2 id="2-Go内存管理及优化"><a href="#2-Go内存管理及优化" class="headerlink" title="2. Go内存管理及优化"></a>2. Go内存管理及优化</h2><h3 id="2-1-Go内存分配"><a href="#2-1-Go内存分配" class="headerlink" title="2.1 Go内存分配"></a>2.1 Go内存分配</h3><h4 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h4><p>目标：为对象在heap上分配内存</p>
<p>提前将内存分块：</p>
<ul>
<li>调用系统调用mmap（）向OS申请一大块内存，例如4MB</li>
<li>先将内存划分成大块，例如8KB，称作mspan</li>
<li>再将大块继续划分成特定大小的小块，用于对象分配</li>
<li>noscan mspan：分配不包含指针的对象—-GC不需要扫描</li>
<li>scan mspan：分配包含指针的对象—-GC需要扫描</li>
</ul>
<p>对象分配：根据对象的大小，选择最合适的块返回</p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul>
<li>TCMalloc：thread caching</li>
<li>每个p包含一个mcache用于快速分配，用于为绑定于p上的g分配对象</li>
<li>mcache管理一组mspan</li>
<li>当mcache中的mspan分配完毕，向mcentral申请带有未分配块的mspan</li>
<li>当mspan中没有分配的对象，mspan会被缓存在mcentral中，而不是立刻释放并归还给OS</li>
</ul>
<h3 id="2-2-Go内存管理优化"><a href="#2-2-Go内存管理优化" class="headerlink" title="2.2 Go内存管理优化"></a>2.2 Go内存管理优化</h3><p>对象分配是非常高频的操作：每秒分配GB级别的内存</p>
<p>小对象占比较高</p>
<p>Go内存分配比较耗时</p>
<ul>
<li>分配路径长：g -&gt; m -&gt; p -&gt; mcache -&gt; mspan -&gt; memory block -&gt; return pointer</li>
<li>pprof：对象分配的函数是最频繁调用的函数之一</li>
</ul>
<h3 id="2-3-字节跳动的优化方案：Balanced-GC"><a href="#2-3-字节跳动的优化方案：Balanced-GC" class="headerlink" title="2.3 字节跳动的优化方案：Balanced GC"></a>2.3 字节跳动的优化方案：Balanced GC</h3><ul>
<li>每个g都绑定一大块内存（1KB）称作goroutine allocation buffer（GAB）</li>
<li>GAB用于noscan类型的小对象分配：&lt; 128B</li>
<li>使用三个指针维护GAB：base, end, top</li>
<li>Bumpointer（指针碰撞）风格对象分配  1）无须和其他分配请求互斥  2）分配动作简单高效</li>
</ul>
<p>GAB对于Go内存管理来说是一个大对象</p>
<ul>
<li>本质：将多个小对象的分配合并成一次大对象的分配</li>
<li>问题：GAB的对象分配方式会导致内存被延迟释放</li>
<li>方案：移动GAB中存活的对象 1）当GAB总大小超过一定阀值时，将GAB中存活的对象复制到另外分配的GAB中 2）原先的GAB可以释放，避免内存泄漏  3）本质：用copying GC的算法管理小对象（根据对象的生命周期，使用不同的标记和清理策略）</li>
</ul>
<h2 id="3-编译器和静态分析"><a href="#3-编译器和静态分析" class="headerlink" title="3. 编译器和静态分析"></a>3. 编译器和静态分析</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="高质量编程与性能调优"><a href="#高质量编程与性能调优" class="headerlink" title="高质量编程与性能调优"></a>高质量编程与性能调优</h1><h2 id="1-高质量编程"><a href="#1-高质量编程" class="headerlink" title="1.高质量编程"></a>1.高质量编程</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><p>什么是高质量编程？</p>
<ul>
<li>各种边界条件是否考虑完备</li>
<li>异常情况处理，稳定性保证</li>
<li>易读易维护</li>
</ul>
<p>编程原则：简单性、可读性、生产力</p>
<h3 id="1-2编码规范"><a href="#1-2编码规范" class="headerlink" title="1.2编码规范"></a>1.2编码规范</h3><p>从五个方面来说：代码格式、注释、命名规范、控制流程、错误和异常处理</p>
<h4 id="1-2-1代码格式"><a href="#1-2-1代码格式" class="headerlink" title="1.2.1代码格式"></a>1.2.1代码格式</h4><p>推荐使用gofmt自动格式化代码</p>
<h4 id="1-2-2注释"><a href="#1-2-2注释" class="headerlink" title="1.2.2注释"></a>1.2.2注释</h4><p>注释应该做的：</p>
<ul>
<li>注释应该解释代码作用：适合注释公公符号</li>
<li>注释应该解释代码如何做的：适合注释实现过程</li>
<li>注释应该解释代码实现的原因：适合解释代码的外部因素和提供额外上下文</li>
<li>注释应该解释代码什么情况会出错：适合解释代码的限制条件</li>
</ul>
<p>公共符号始终要注释，有一个例外，不需要注释实现接口的方法。</p>
<h4 id="1-2-3命名规范"><a href="#1-2-3命名规范" class="headerlink" title="1.2.3命名规范"></a>1.2.3命名规范</h4><p>变量：</p>
<ul>
<li>简洁胜于冗长</li>
<li>缩略词全大写，但当其位于变量开头且不需要导出时，使用全小写</li>
<li>变量距离其被使用的地方越远，则需要携带越多的上下文信息</li>
</ul>
<p>函数：</p>
<ul>
<li>函数名不携带包名的上下文信息，因为包名和函数名总是成对出现的</li>
<li>函数名尽量简短</li>
<li>当名为foo的包某个函数返回类型Foo时，可以省略类型信息而不导致歧义</li>
<li>当名为foo的包某个函数返回类型T时（T并不是Foo），可以在函数名中加入类型信息</li>
</ul>
<p>包：</p>
<ul>
<li>只由小写字母组成，不包含大写字母和下划线等字符</li>
<li>简短并包含一定的上下文信息。</li>
<li>不要与标准库同名</li>
</ul>
<h4 id="1-2-4控制流程"><a href="#1-2-4控制流程" class="headerlink" title="1.2.4控制流程"></a>1.2.4控制流程</h4><ul>
<li>避免嵌套，保持正常流程清晰</li>
<li>尽量保持正常代码路径为最小缩进</li>
</ul>
<h4 id="1-2-5错误和异常处理"><a href="#1-2-5错误和异常处理" class="headerlink" title="1.2.5错误和异常处理"></a>1.2.5错误和异常处理</h4><ul>
<li>简单错误：仅出现一次的错误，且在其他地方不需要捕获该错误；优先使用errors.New来创建匿名变量来直接表示简单错误</li>
<li>错误的Wrap和Unwrap，错误的Wrap实际上是提供一个error嵌套另一个error的能力，从而生成一个error的跟踪链，在fmt.Errorf中使用%w关键字来将一个错误关联至错误链中</li>
<li>错误判定：判定一个错误是否为特定错误，使用errors.Is，不同于==，使用该方法可以判定错误链上的所有错误是否含有特定的错误。在错误链上获取特定种类的错误，使用errors.As</li>
<li>panic：不建议在业务代码中使用panic，调用函数不包含recover会造成程序崩溃，若问题可以被屏蔽或解决，建议使用error代替panic。当程序启动阶段发生不可逆转的错误时，可以在init或main函数中使用panic</li>
<li>recover：只能在被defer的函数中使用，嵌套无法生效，只在当前goroutine生效，defer的语句是后进先出。如果需要更多的上下文信息，可以recover后在log中记录当前的调用栈</li>
</ul>
<h3 id="1-3性能优化建议"><a href="#1-3性能优化建议" class="headerlink" title="1.3性能优化建议"></a>1.3性能优化建议</h3><h4 id="1-3-1-Benchmark"><a href="#1-3-1-Benchmark" class="headerlink" title="1.3.1 Benchmark"></a>1.3.1 Benchmark</h4><p>性能表现需要实际数据衡量，通过命令go test -bench=. -benchmem获取性能代码分析结果</p>
<h4 id="1-3-2-Slice"><a href="#1-3-2-Slice" class="headerlink" title="1.3.2 Slice"></a>1.3.2 Slice</h4><p>slice预分配内存，尽可能在使用make()初始化切片时提供容量信息</p>
<ul>
<li>切片操作并不复制切片指向的元素</li>
<li>创建一个新的切片会服用原来切片的底层数组</li>
<li>在已有切片基础上创建切片，不会创建新的底层数组，当原底层数组在内存中有引用而原底层数组较大时，新建小切片会使得原底层数组得不到释放</li>
<li>可用copy替代re-slice</li>
</ul>
<h4 id="1-3-3-Map"><a href="#1-3-3-Map" class="headerlink" title="1.3.3 Map"></a>1.3.3 Map</h4><p>map预分配内存：</p>
<ul>
<li>不断向map中添加元素的操作会触发map的扩容</li>
<li>提前分配好空间可以减少内存拷贝和Rehash的消耗</li>
<li>建议根据实际需求提前预估好需要的空间</li>
</ul>
<h4 id="1-3-4字符串处理"><a href="#1-3-4字符串处理" class="headerlink" title="1.3.4字符串处理"></a>1.3.4字符串处理</h4><p>使用strings.Builder</p>
<pre><code>var builder strings.Builder
builder.WriteString(&quot;ss&quot;)
builder.String()
</code></pre>
<p>使用bytes.Buffer</p>
<pre><code>buf := new(bytes.Buffer)
buf.WriteString(&quot;ss&quot;)
buf.String()
</code></pre>
<p>分析：</p>
<ul>
<li>字符串在Go语言中是不可变类型，占用内存大小是固定的</li>
<li>使用+每次都会重新分配内存</li>
<li>strings.Builder，bytes.Buffer底层都是[]byte数组</li>
<li>内存扩容策略，不需要每次拼接重新分配内存</li>
<li>bytes.Buffer转化为字符串时重新申请了一块空间</li>
<li>string.Builder直接将底层的[]byte转换成了字符串类型返回</li>
</ul>
<h4 id="1-3-5空结构体"><a href="#1-3-5空结构体" class="headerlink" title="1.3.5空结构体"></a>1.3.5空结构体</h4><p>使用空结构体节省内存</p>
<ul>
<li>空结构体struct{}实例不占据任何的内存空间</li>
<li>可作为各种场景下的占位符使用，节省资源，空结构体本身具备很强的语义，即这里不需要任何值，仅作为占位符</li>
</ul>
<h4 id="1-3-6-atomic包"><a href="#1-3-6-atomic包" class="headerlink" title="1.3.6 atomic包"></a>1.3.6 atomic包</h4><ul>
<li>锁的实现是通过操作系统来实现，属于系统调用</li>
<li>atomic操作是通过硬件实现，效率比锁高</li>
<li>sync.Mutex应该用来保护一段逻辑，不仅仅用于保护一个变量</li>
<li>对于非数值操作，可以使用atomic.Value，能承载一个interface{}</li>
</ul>
<h2 id="2-性能调优实战"><a href="#2-性能调优实战" class="headerlink" title="2.性能调优实战"></a>2.性能调优实战</h2><h3 id="2-1-性能调优原则"><a href="#2-1-性能调优原则" class="headerlink" title="2.1 性能调优原则"></a>2.1 性能调优原则</h3><ul>
<li>要依靠数据不是猜测</li>
<li>要定位最大瓶颈而不是细枝末节</li>
<li>不要过早优化</li>
<li>不要过度优化</li>
</ul>
<h3 id="2-2-性能分析工具pprof"><a href="#2-2-性能分析工具pprof" class="headerlink" title="2.2 性能分析工具pprof"></a>2.2 性能分析工具pprof</h3><p>旨在知道应用在什么地方耗费了多少CPU、Memory</p>
<h4 id="2-2-1-pprof命令"><a href="#2-2-1-pprof命令" class="headerlink" title="2.2.1 pprof命令"></a>2.2.1 pprof命令</h4><ul>
<li>topN：查看占用资源最多的函数  flat（当前函数本身的执行耗时） flat%（flat占CPU总时间的比例） sum%（上面每一行的flat%总和） cum（指当前函数本身加上其调用函数的总耗时） cum%（cum占CPU总时间的比例）</li>
<li>list：根据指定的正则表达式查找代码行</li>
<li>web：调用关系可视化</li>
<li>Heap-堆内存：go tool pprof -http=:8080 “<a href="http://localhost:6060/debug/pprof/heap&quot;">http://localhost:6060/debug/pprof/heap&quot;</a></li>
<li>goroutine-协程：goroutine泄露也会导致内存泄露 go tool pprof -http=:8080 “<a href="http://localhost:6060/debug/pprof/goroutine&quot;">http://localhost:6060/debug/pprof/goroutine&quot;</a>  1.由上到下表示调用顺序 2.每一块代表一个函数，越长代表占用CPU的时间更长 3.火焰图是动态的，支持点击块进行分析 4.支持搜索，在Source视图下搜索wolf</li>
<li>mutex-锁：go tool pprof -http=:8080 “<a href="http://localhost:6060/debug/pprof/mutex&quot;">http://localhost:6060/debug/pprof/mutex&quot;</a></li>
<li>block-阻塞：go tool pprof -http=:8080 “<a href="http://localhost:6060/debug/pprof/block&quot;">http://localhost:6060/debug/pprof/block&quot;</a></li>
</ul>
<h4 id="2-2-2-pprof采样过程和原理"><a href="#2-2-2-pprof采样过程和原理" class="headerlink" title="2.2.2 pprof采样过程和原理"></a>2.2.2 pprof采样过程和原理</h4><p>CPU：</p>
<ul>
<li>采样对象：函数调用和它们占用的时间</li>
<li>采样率：100次/秒，固定值</li>
<li>采样时间：从手动启动到手动结束</li>
<li>操作系统：每10ms向进程发送一次SIGPROF信号</li>
<li>进程：每次接收到SIGPROF会记录调用堆栈</li>
<li>写缓冲：每100ms读取已经记录的调用栈并写入输出流</li>
</ul>
<p>Heap-堆内存</p>
<ul>
<li>采样程序通过内存分配器在堆上分配和释放的内存，记录分配/释放的大小和数量</li>
<li>采样率：每分配512KB记录一次，可在运行开头修改，1为每次分配均记录</li>
<li>采样时间：从程序运行开始到采样时</li>
<li>采样指标：alloc_space，alloc_objects，inuse-space，inuse_objects</li>
<li>计算方式：inuse=alloc-free</li>
</ul>
<p>Goroutine-协程&amp;ThreadCreate-线程创建</p>
<p>Block-阻塞&amp;Mutex-锁</p>
<p>阻塞操作：</p>
<ul>
<li>采样阻塞操作的次数和耗时</li>
<li>采样率：阻塞耗时超过阀值的才会被记录，1为每次阻塞均记录</li>
</ul>
<p>锁竞争：</p>
<ul>
<li>采样争抢锁的次数和耗时</li>
<li>采样率：只记录固定比例的锁操作，1为每次加锁均记录</li>
</ul>
<h3 id="2-3-性能调优案例"><a href="#2-3-性能调优案例" class="headerlink" title="2.3 性能调优案例"></a>2.3 性能调优案例</h3><h4 id="2-3-1-业务服务优化"><a href="#2-3-1-业务服务优化" class="headerlink" title="2.3.1 业务服务优化"></a>2.3.1 业务服务优化</h4><p>概念：</p>
<ul>
<li>服务：能单独部署，承载一定功能的程序</li>
<li>依赖：ServiceA的功能实现依赖ServiceB的响应结果，称为ServiceA依赖ServiceB</li>
<li>调用链路：能支持一个接口请求的相关服务集合及其相互之间的依赖关系</li>
<li>基础库：公共的工具包、中间件</li>
</ul>
<p>流程：</p>
<ul>
<li>建立服务性能评估手段</li>
<li>分析性能数据，定位性能瓶颈</li>
<li>重点优化项改造</li>
<li>优化效果验证</li>
</ul>
<p>建立服务性能评估手段</p>
<ul>
<li>服务性能评估方式 1）单独benchmark无法满足复杂逻辑分析 2）不同负载情况下性能表现差异</li>
<li>请求流量构造 1）不同请求参数覆盖逻辑不同 2）线上真实流量情况</li>
<li>压测范围 1）单机器压测 2）集群压测</li>
<li>性能数据采集 1）单机性能数据 2）集群性能数据 </li>
</ul>
<p>分析性能数据，定位性能瓶颈</p>
<ul>
<li>使用库不规范</li>
<li>高并发场景优化不足</li>
</ul>
<p>重点优化项改造</p>
<ul>
<li>正确性是基础</li>
<li>响应数据diff 1）线上请求数据录制回放 2）新旧逻辑接口数据diff</li>
</ul>
<p>优化效果验证</p>
<ul>
<li>重复压测验证</li>
<li>上线评估优化效果 1）关注服务监控 2）逐步放量 3）收集性能数据</li>
</ul>
<p>进一步优化，服务整体链路分析</p>
<ul>
<li>规范上游服务调用接口，明确场景需求</li>
<li>分析链路，通过业务流程优化提升服务性能</li>
</ul>
<h4 id="2-3-2基础库优化"><a href="#2-3-2基础库优化" class="headerlink" title="2.3.2基础库优化"></a>2.3.2基础库优化</h4><p>AB实现SDK的优化</p>
<ul>
<li>分析基础库核心逻辑和性能瓶颈 1）设计完善改造方案 2）数据按需获取 3）数据序列化协议优化</li>
<li>内部压测验证</li>
<li>推广业务服务落地验证</li>
</ul>
<p>2.3.3Go语言优化</p>
<p>编译器&amp;运行时优化</p>
<ul>
<li>优化内存分配策略</li>
<li>优化代码编译流程，生成更高效的程序</li>
<li>内部压测验证</li>
<li>推广业务服务落地验证</li>
</ul>
<p>优点：</p>
<ul>
<li>接入简单，只需要调整编译配置</li>
<li>通用性强</li>
</ul>
]]></content>
  </entry>
</search>
